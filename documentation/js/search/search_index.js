var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddToCartEvent.html",[0,0.172,1,2.208]],["body/classes/AddToCartEvent.html",[0,0.219,1,3.532,2,1.028,3,0.243,4,0.243,5,0.243,6,6.141,7,4.065,8,0.392,9,1.424,10,5.572,11,1.031,12,3.859,13,3.859,14,4.518,15,0.676,16,0.018,17,0.9,18,0.938,19,4.733,20,4.733,21,2.539,22,4.733,23,4.733,24,4.733,25,0.271,26,0.015,27,0.015]],["title/injectables/AddToCartListener.html",[28,1.135,29,2.379]],["body/injectables/AddToCartListener.html",[0,0.138,1,3.34,3,0.153,4,0.153,5,0.153,8,0.246,10,4.821,11,0.812,12,1.771,13,3.04,14,3.019,15,0.418,16,0.019,18,0.58,25,0.171,26,0.011,27,0.011,28,1.326,29,2.779,30,1.459,31,4.39,32,2.557,33,1.463,34,2.363,35,4.334,36,1.703,37,2.281,38,2.579,39,5.111,40,2.924,41,3.914,42,4.12,43,3.914,44,2.977,45,1.146,46,0.689,47,4.334,48,1.005,49,4.334,50,2.977,51,5.111,52,0.714,53,2.557,54,0.433,55,2.977,56,1.551,57,3.019,58,0.5,59,2.977,60,1.909,61,1.909,62,2.074,63,1.111,64,1.233,65,1.654,66,2.557,67,1.703,68,1.771,69,1.057,70,1.459,71,2.004,72,1.909,73,1.326,74,1.654,75,1.771,76,1.654,77,2.074,78,3.599,79,2.977,80,2.281,81,2.281,82,2.977,83,2.977,84,2.977,85,2.977,86,2.977,87,2.977,88,2.977,89,2.977,90,2.977,91,2.281,92,1.636,93,3.723,94,2.363,95,2.074,96,2.662,97,3.914,98,1.111,99,0.827,100,4.334,101,2.977,102,2.977,103,5.111,104,2.557,105,2.977,106,2.977,107,2.977,108,1.263,109,3.019,110,2.557,111,2.977,112,2.977,113,1.771,114,4.334,115,2.977,116,2.977,117,2.977,118,1.302]],["title/controllers/AppController.html",[119,1.819,120,2.585]],["body/controllers/AppController.html",[0,0.233,3,0.259,4,0.259,5,0.259,8,0.417,16,0.019,17,0.777,18,0.674,25,0.289,26,0.015,27,0.015,33,2.084,48,1.701,52,1.209,54,0.392,58,0.846,108,1.469,119,3.025,120,4.299,121,2.47,122,4.328,123,5.973,124,5.039,125,3.97,126,4.328,127,2.998,128,4.328,129,5.039]],["title/modules/AppModule.html",[130,1.716,131,2.585]],["body/modules/AppModule.html",[0,0.172,3,0.191,4,0.191,5,0.191,16,0.019,17,0.467,25,0.213,26,0.013,27,0.013,54,0.454,58,0.623,60,2.379,61,2.379,63,1.385,73,1.135,76,2.061,120,4.013,121,2.481,125,3.978,126,3.187,130,2.341,131,5.127,132,1.932,133,2.636,134,3.187,135,3.187,136,3.187,137,4.286,138,4.286,139,4.286,140,4.286,141,3.012,142,2.207,143,2.061,144,3.71,145,3.245,146,3.526,147,3.71,148,2.584,149,2.584,150,3.71,151,3.71,152,3.71,153,3.71,154,3.71,155,1.623,156,2.379,157,3.71,158,3.187,159,3.71,160,3.187,161,3.71,162,5.062,163,3.71,164,3.71,165,3.71,166,3.71,167,1.932,168,3.71,169,3.71]],["title/injectables/AppService.html",[28,1.135,125,2.208]],["body/injectables/AppService.html",[0,0.208,1,3.422,3,0.231,4,0.231,5,0.231,8,0.373,11,0.716,15,0.434,16,0.019,17,0.724,18,0.77,25,0.258,26,0.014,27,0.014,28,1.76,30,2.206,33,1.942,36,1.769,45,1.191,46,0.716,52,1.08,54,0.403,58,0.756,60,2.886,61,2.886,92,1.312,99,1.25,108,1.312,113,2.678,123,5.737,125,3.422,127,2.678,170,3.867,171,4.502,172,5.737,173,4.502,174,4.94,175,4.502,176,4.502,177,5.752,178,4.502,179,4.502,180,4.502,181,4.502,182,4.502,183,4.502,184,4.502,185,3.867,186,4.502,187,4.502]],["title/guards/AuthGuard.html",[188,2.842,189,2.585]],["body/guards/AuthGuard.html",[0,0.162,3,0.179,4,0.179,5,0.179,8,0.289,11,0.772,15,0.468,16,0.019,18,0.65,25,0.2,26,0.012,27,0.012,28,1.485,33,1.639,34,2.581,36,1.908,45,1.284,46,0.772,52,0.837,54,0.417,58,0.586,78,3.112,92,2,94,1.614,98,1.303,99,0.969,108,1.758,113,2.077,128,2.998,167,2.528,189,3.381,190,3.491,191,2.998,192,6.032,193,3.491,194,3.216,195,6.732,196,3.491,197,4.854,198,5.181,199,3.491,200,2.998,201,1.908,202,2.998,203,2.674,204,2.432,205,2.238,206,1.372,207,2.674,208,3.718,209,1.711,210,2.077,211,2.077,212,2.998,213,2.432,214,4.169,215,3.491,216,4.854,217,6.032,218,3.491,219,3.491,220,4.854,221,3.491,222,2.674,223,3.491,224,4.854,225,3.491,226,3.491,227,3.491,228,2.432,229,2.674,230,4.854,231,3.491,232,2.44,233,4.854,234,3.491,235,2.998,236,3.491,237,3.491]],["title/injectables/CRUDService.html",[28,1.135,38,1.537]],["body/injectables/CRUDService.html",[0,0.113,3,0.126,4,0.126,5,0.126,8,0.202,11,0.92,15,0.646,16,0.019,18,0.774,25,0.14,26,0.009,27,0.009,28,1.145,30,1.198,33,1.263,34,3.272,38,1.55,42,4.796,45,1.773,46,0.92,52,1.388,54,0.238,58,0.41,64,1.013,92,1.09,94,1.73,99,0.679,108,1.755,113,1.455,167,1.273,201,2.634,238,2.1,239,4.537,240,3.742,241,4.545,242,4.545,243,4.545,244,4.545,245,4.545,246,3.742,247,6.022,248,2.445,249,3.014,250,5.487,251,2.445,252,6.703,253,6.979,254,7.156,255,6.979,256,2.445,257,5.469,258,2.445,259,2.445,260,2.445,261,6.211,262,6.022,263,2.445,264,2.445,265,2.445,266,2.445,267,2.445,268,3.742,269,2.445,270,1.703,271,2.445,272,2.445,273,2.445,274,2.445,275,3.742,276,2.445,277,2.445]],["title/classes/CatchAllFilter.html",[0,0.172,278,2.585]],["body/classes/CatchAllFilter.html",[0,0.181,2,0.849,3,0.201,4,0.201,5,0.201,8,0.323,11,0.621,15,0.377,16,0.019,17,0.492,18,0.523,25,0.224,26,0.013,27,0.013,33,1.77,45,1.033,46,0.621,52,0.937,54,0.333,57,3.651,58,0.656,92,2.081,99,1.085,204,2.721,205,2.504,213,3.651,222,2.992,249,3.081,278,3.651,279,4.502,280,3.355,281,5.081,282,4.403,283,4.502,284,5.081,285,5.43,286,3.907,287,2.721,288,1.915,289,5.242,290,4.502,291,2.504,292,5.242,293,4.531,294,3.355,295,3.355,296,3.355,297,3.355,298,2.992,299,3.355,300,5.081,301,3.355,302,2.292,303,3.355,304,1.255,305,2.721,306,4.015,307,3.355,308,5.081,309,3.355,310,5.081,311,3.355,312,3.355,313,3.355,314,3.355,315,3.355]],["title/modules/CommonModule.html",[130,1.716,137,2.379]],["body/modules/CommonModule.html",[0,0.191,3,0.212,4,0.212,5,0.212,16,0.019,25,0.237,26,0.013,27,0.013,38,2.856,54,0.453,58,0.692,130,2.513,132,2.148,133,2.83,137,4.573,141,3.233,142,2.454,143,2.291,145,3.484,189,3.785,194,3.379,203,3.159,212,3.543,278,3.785,316,3.543,317,3.543,318,4.125,319,5.435,320,6.078,321,5.435,322,5.435,323,4.125,324,4.125,325,3.785,326,4.125,327,4.125,328,3.785,329,4.125,330,4.125,331,6.46,332,6.46]],["title/classes/Credentials.html",[0,0.172,333,2.208]],["body/classes/Credentials.html",[0,0.273,2,1.019,3,0.241,4,0.241,5,0.241,8,0.388,9,1.416,15,0.569,16,0.019,17,0.88,18,0.79,25,0.269,26,0.015,27,0.015,48,1.992,54,0.298,304,2.075,333,3.511,334,4.026,335,4.021,336,4.867,337,3.59,338,4.52,339,3.265,340,4.722,341,4.688,342,3.59,343,4.688,344,5.069,345,4.499,346,2.603]],["title/classes/DomainError.html",[0,0.172,347,1.819]],["body/classes/DomainError.html",[0,0.286,2,0.632,3,0.149,4,0.149,5,0.149,8,0.241,9,1.022,11,0.882,15,0.535,16,0.019,17,0.854,18,0.743,21,2.205,25,0.383,26,0.011,27,0.011,36,1.674,45,0.769,46,0.462,52,0.697,54,0.27,56,1.514,58,0.488,98,1.085,99,0.807,108,0.847,206,1.143,288,2.72,302,2.584,304,2.21,347,3.206,348,1.514,349,2.153,350,3.901,351,3.795,352,3.673,353,4.259,354,2.907,355,2.907,356,1.514,357,1.73,358,1.73,359,1.73,360,3.673,361,1.73,362,1.73,363,1.73,364,1.73,365,1.73,366,1.73,367,1.514,368,1.514,369,1.73,370,1.514,371,1.514,372,1.514,373,1.514,374,1.73,375,1.73,376,1.514,377,1.73,378,1.73,379,1.514,380,1.615,381,1.73,382,1.73,383,2.72,384,2.8,385,1.615,386,1.615,387,2.366,388,2.366,389,2.366,390,3.083,391,1.271,392,1.032,393,1.615,394,2.204,395,1.615,396,1.085,397,2.366,398,1.73,399,1.514,400,1.73,401,1.73,402,1.73,403,1.73,404,1.73,405,1.73,406,1.73]],["title/classes/InvalidInputError.html",[0,0.172,373,1.933]],["body/classes/InvalidInputError.html",[0,0.287,2,0.638,3,0.151,4,0.151,5,0.151,8,0.243,9,1.029,11,0.886,15,0.489,16,0.019,17,0.78,18,0.746,21,1.892,25,0.384,26,0.011,27,0.011,36,1.686,45,0.776,46,0.467,52,0.704,54,0.272,56,1.529,58,0.493,98,1.096,99,0.815,108,0.856,206,1.154,288,2.733,302,2.439,304,2.214,347,3.377,348,1.529,349,2.16,350,3.827,351,3.529,352,3.686,356,1.529,357,1.747,358,1.747,359,1.747,360,3.686,361,1.747,362,1.747,363,1.747,364,1.747,365,1.747,366,1.747,367,1.529,368,1.529,369,1.747,370,1.529,371,1.529,372,1.529,373,2.234,374,1.747,375,1.747,376,1.529,377,1.747,378,1.747,379,1.529,380,1.631,381,1.747,382,1.747,383,2.733,384,2.816,385,1.631,386,1.631,387,2.383,388,2.383,389,2.383,390,3.097,391,1.284,392,1.042,393,1.631,394,2.217,395,1.631,396,1.096,397,2.383,398,1.747,399,1.529,400,1.747,401,1.747,402,1.747,403,1.747,404,1.747,405,1.747,406,1.747,407,2.936,408,2.816,409,1.882,410,1.882,411,1.882]],["title/classes/InvalidRequestError.html",[0,0.172,370,1.933]],["body/classes/InvalidRequestError.html",[0,0.287,2,0.638,3,0.151,4,0.151,5,0.151,8,0.243,9,1.029,11,0.886,15,0.489,16,0.019,17,0.78,18,0.746,21,1.892,25,0.384,26,0.011,27,0.011,36,1.686,45,0.776,46,0.467,52,0.704,54,0.272,56,1.529,58,0.493,98,1.096,99,0.815,108,0.856,206,1.154,288,2.733,302,2.439,304,2.214,347,3.377,348,1.529,349,2.16,350,3.827,351,3.529,352,3.686,356,1.529,357,1.747,358,1.747,359,1.747,360,3.686,361,1.747,362,1.747,363,1.747,364,1.747,365,1.747,366,1.747,367,1.529,368,1.529,369,1.747,370,2.234,371,1.529,372,1.529,373,1.529,374,1.747,375,1.747,376,1.529,377,1.747,378,1.747,379,1.529,380,1.631,381,1.747,382,1.747,383,2.733,384,2.816,385,1.631,386,1.631,387,2.383,388,2.383,389,2.383,390,3.097,391,1.284,392,1.042,393,1.631,394,2.217,395,1.631,396,1.096,397,2.383,398,1.747,399,1.529,400,1.747,401,1.747,402,1.747,403,1.747,404,1.747,405,1.747,406,1.747,408,2.816,409,1.882,410,1.882,411,1.882,412,2.936]],["title/injectables/JWTService.html",[28,1.135,194,1.819]],["body/injectables/JWTService.html",[0,0.153,3,0.17,4,0.17,5,0.17,8,0.273,11,0.861,15,0.522,16,0.019,17,0.741,18,0.725,25,0.19,26,0.012,27,0.012,28,1.429,30,1.619,33,1.577,34,2.982,36,1.298,45,1.433,46,0.861,52,1.12,54,0.394,58,0.555,73,1.011,92,1.716,94,2.16,96,2.432,98,1.233,99,0.917,108,1.361,127,1.965,148,2.301,194,2.289,201,2.314,206,1.298,209,1.619,210,2.778,211,1.965,228,4.617,229,3.577,232,2.042,282,3.253,291,2.118,302,2.042,335,2.594,371,1.721,380,1.835,413,2.53,414,4.67,415,4.67,416,3.304,417,5.538,418,3.304,419,4.67,420,5.406,421,3.304,422,4.67,423,3.304,424,2.301,425,2.301,426,2.301,427,2.838,428,3.577,429,2.838,430,3.577,431,2.838,432,3.304,433,4.011,434,4.67,435,3.304,436,4.67,437,3.304,438,3.304,439,3.304,440,3.304,441,3.304,442,3.304,443,3.304,444,3.304,445,3.304,446,3.304,447,3.304]],["title/injectables/LoggingInterceptor.html",[28,1.135,328,2.585]],["body/injectables/LoggingInterceptor.html",[0,0.176,3,0.195,4,0.195,5,0.195,8,0.314,11,0.603,15,0.366,16,0.019,17,0.647,18,0.508,25,0.295,26,0.013,27,0.013,28,1.573,30,1.86,33,1.736,45,1.004,46,0.603,52,0.911,54,0.397,56,1.977,58,0.637,92,1.106,99,1.054,108,1.498,198,5.367,200,3.26,204,4.689,205,2.434,211,2.258,213,2.644,249,2.678,282,2.644,287,2.644,293,3.938,328,3.581,394,1.66,396,1.417,399,1.977,433,3.26,448,2.908,449,5.141,450,5.141,451,5.83,452,6.249,453,3.796,454,5.83,455,5.141,456,3.796,457,3.26,458,6.732,459,5.83,460,3.796,461,3.796,462,2.644,463,3.796,464,4.416,465,5.141,466,3.796,467,3.796,468,3.796,469,3.796,470,3.796,471,3.796,472,2.644,473,3.796,474,3.796,475,3.26,476,3.796]],["title/classes/NotFoundError.html",[0,0.172,367,1.933]],["body/classes/NotFoundError.html",[0,0.287,2,0.638,3,0.151,4,0.151,5,0.151,8,0.243,9,1.029,11,0.886,15,0.489,16,0.019,17,0.78,18,0.746,21,1.892,25,0.384,26,0.011,27,0.011,36,1.686,45,0.776,46,0.467,52,0.704,54,0.272,56,1.529,58,0.493,98,1.096,99,0.815,108,0.856,206,1.154,288,2.733,302,2.439,304,2.214,347,3.377,348,1.529,349,2.16,350,3.827,351,3.529,352,3.686,356,1.529,357,1.747,358,1.747,359,1.747,360,3.686,361,1.747,362,1.747,363,1.747,364,1.747,365,1.747,366,1.747,367,2.234,368,1.529,369,1.747,370,1.529,371,1.529,372,1.529,373,1.529,374,1.747,375,1.747,376,1.529,377,1.747,378,1.747,379,1.529,380,1.631,381,1.747,382,1.747,383,2.733,384,2.816,385,1.631,386,1.631,387,2.383,388,2.383,389,2.383,390,3.097,391,1.284,392,1.042,393,1.631,394,2.217,395,1.631,396,1.096,397,2.383,398,1.747,399,1.529,400,1.747,401,1.747,402,1.747,403,1.747,404,1.747,405,1.747,406,1.747,408,2.816,409,1.882,410,1.882,411,1.882,477,2.936]],["title/classes/PartialProduct.html",[0,0.172,478,1.716]],["body/classes/PartialProduct.html",[0,0.315,2,1.032,3,0.244,4,0.244,5,0.244,16,0.019,25,0.391,26,0.015,27,0.015,54,0.454,67,1.866,69,1.685,70,2.327,73,1.453,155,2.602,349,2.299,478,2.751,479,3.044,480,3.307,481,3.044,482,3.044,483,3.044,484,2.327,485,3.307,486,2.327,487,2.825,488,2.196,489,3.044,490,2.473,491,3.307,492,2.825,493,3.307,494,2.825,495,3.307,496,3.307]],["title/classes/PartialShoppingCart.html",[0,0.172,492,2.208]],["body/classes/PartialShoppingCart.html",[0,0.315,2,1.032,3,0.244,4,0.244,5,0.244,16,0.019,25,0.391,26,0.015,27,0.015,54,0.454,67,1.866,69,1.685,70,2.327,73,1.453,155,2.602,349,2.299,478,2.196,479,3.044,480,3.307,481,3.044,482,3.044,483,3.044,484,2.327,485,3.307,486,2.327,487,2.825,488,2.196,489,3.044,490,2.473,491,3.307,492,3.539,493,3.307,494,2.825,495,3.307,496,3.307]],["title/classes/PartialShoppingCartItem.html",[0,0.172,494,2.208]],["body/classes/PartialShoppingCartItem.html",[0,0.315,2,1.032,3,0.244,4,0.244,5,0.244,16,0.019,25,0.391,26,0.015,27,0.015,54,0.454,67,1.866,69,1.685,70,2.327,73,1.453,155,2.602,349,2.299,478,2.196,479,3.044,480,3.307,481,3.044,482,3.044,483,3.044,484,2.327,485,3.307,486,2.327,487,2.825,488,2.196,489,3.044,490,2.473,491,3.307,492,2.825,493,3.307,494,3.539,495,3.307,496,3.307]],["title/classes/PartialUser.html",[0,0.172,490,1.933]],["body/classes/PartialUser.html",[0,0.315,2,1.032,3,0.244,4,0.244,5,0.244,16,0.019,25,0.391,26,0.015,27,0.015,54,0.454,67,1.866,69,1.685,70,2.327,73,1.453,155,2.602,349,2.299,478,2.196,479,3.044,480,3.307,481,3.044,482,3.044,483,3.044,484,2.327,485,3.307,486,2.327,487,2.825,488,2.196,489,3.044,490,3.098,491,3.307,492,2.825,493,3.307,494,2.825,495,3.307,496,3.307]],["title/classes/Product.html",[0,0.172,71,1.716]],["body/classes/Product.html",[0,0.167,2,0.785,3,0.185,4,0.185,5,0.185,8,0.299,9,1.192,11,0.903,12,3.38,15,0.677,16,0.019,17,0.835,18,0.909,21,2.284,25,0.285,26,0.012,27,0.012,46,0.973,48,2.293,54,0.316,63,1.348,64,2.058,71,2.298,92,1.052,167,3.187,349,1.677,391,2.173,392,1.281,497,2.765,498,3.957,499,4.351,500,2.959,501,4.879,502,4.879,503,4.879,504,4.556,505,3.611,506,3.611,507,4.267,508,4.687,509,4.82,510,2.765,511,3.611,512,3.611,513,3.611,514,3.155,515,2.765,516,3.611,517,3.611,518,2.588,519,2.315,520,4.687,521,3.611,522,2.315,523,3.101]],["title/controllers/ProductController.html",[119,1.819,524,2.585]],["body/controllers/ProductController.html",[0,0.152,3,0.168,4,0.168,5,0.168,8,0.271,11,0.857,15,0.52,16,0.019,17,0.81,18,0.828,25,0.188,26,0.011,27,0.011,33,1.567,45,1.426,46,0.857,48,2.09,52,1.485,54,0.42,58,0.55,71,2.146,108,1.804,119,1.605,121,1.605,127,1.948,201,2.738,209,1.605,232,1.432,239,4.122,383,1.605,462,3.232,478,2.712,484,2.874,524,3.232,525,2.812,526,2.508,527,3.274,528,5.037,529,5.037,530,3.986,531,3.986,532,4.63,533,4.63,534,2.812,535,3.274,536,3.274,537,3.274,538,2.812,539,3.274,540,3.274,541,3.489,542,2.812,543,3.274,544,3.274,545,2.812,546,5.037,547,2.812,548,3.274,549,3.554,550,2.812,551,3.554,552,2.812,553,2.812,554,1.948,555,2.812,556,1.605,557,2.994,558,2.812,559,3.274,560,3.274,561,2.508,562,3.274,563,3.274,564,4.63,565,4.63,566,3.274,567,3.274,568,2.812,569,2.508,570,3.274,571,3.274]],["title/classes/ProductDto.html",[0,0.172,484,1.819]],["body/classes/ProductDto.html",[0,0.21,2,0.687,3,0.162,4,0.162,5,0.162,8,0.262,9,1.086,11,1.04,12,4.054,15,0.631,16,0.019,17,0.881,18,0.896,21,2.28,25,0.181,26,0.011,27,0.011,46,1.01,48,2.26,54,0.287,64,1.875,71,2.669,96,2.754,158,3.888,304,2.222,339,2.203,340,3.683,342,2.422,345,4.255,346,1.756,392,1.122,484,2.219,499,4.05,500,3.408,501,4.541,502,5.247,503,4.541,507,3.888,509,4.427,514,1.756,572,2.716,573,4.527,574,5.459,575,3.162,576,3.162,577,4.527,578,3.888,579,3.162,580,3.162,581,3.162,582,3.162,583,2.422,584,5.288,585,3.162,586,3.162,587,3.162,588,5.288,589,3.162,590,3.162,591,4.527,592,3.162,593,3.162,594,4.527,595,3.162,596,5.288,597,4.527,598,4.021,599,3.162]],["title/modules/ProductModule.html",[130,1.716,138,2.379]],["body/modules/ProductModule.html",[0,0.171,3,0.189,4,0.189,5,0.189,11,0.912,16,0.019,25,0.211,26,0.012,27,0.012,29,4.277,38,2.764,40,3.474,54,0.457,58,0.618,63,1.375,65,2.045,71,1.703,72,2.361,73,1.127,74,2.045,75,2.191,76,2.045,77,2.565,121,2.468,130,2.329,132,1.918,133,2.623,138,4.714,141,2.996,142,2.191,143,2.045,145,3.229,146,2.565,149,2.565,194,3.269,518,2.989,522,3.229,524,3.998,557,3.705,558,3.163,600,3.163,601,3.163,602,3.683,603,3.683,604,3.683,605,2.996,606,2.191,607,3.229,608,2.191,609,2.821,610,2.821,611,2.821,612,2.821,613,2.821,614,3.163]],["title/injectables/ProductService.html",[28,1.135,557,2.061]],["body/injectables/ProductService.html",[0,0.128,3,0.141,4,0.141,5,0.141,8,0.228,11,0.919,15,0.521,16,0.019,17,0.763,18,0.81,25,0.158,26,0.01,27,0.01,28,1.253,30,1.35,33,1.382,34,3.271,36,1.609,37,2.11,38,2.509,42,3.467,43,3.742,45,1.43,46,0.86,52,1.386,54,0.425,58,0.462,62,1.919,63,1.028,64,1.141,65,1.53,71,2.8,72,1.766,78,2.625,81,2.11,91,2.11,92,1.765,94,2.8,95,3.403,96,2.544,108,1.684,109,1.919,167,2.132,201,2.632,206,1.083,209,1.35,210,2.436,211,2.436,368,2.132,396,1.028,478,2.501,484,2.65,528,4.645,529,4.645,530,3.516,531,3.516,532,4.196,538,3.516,541,3.603,542,3.516,545,2.366,546,4.645,554,1.639,555,2.366,557,2.274,612,2.11,615,2.366,616,2.755,617,2.755,618,2.755,619,2.755,620,2.755,621,2.755,622,4.094,623,2.755,624,4.196,625,4.963,626,4.094,627,2.366,628,4.094,629,2.755,630,2.366,631,4.094,632,2.366,633,2.755,634,4.094,635,2.11,636,2.755]],["title/interfaces/RetryOptions.html",[637,2.061,638,2.208]],["body/interfaces/RetryOptions.html",[3,0.204,4,0.204,5,0.204,8,0.329,9,1.273,15,0.512,16,0.019,17,0.501,21,2.548,25,0.381,26,0.013,27,0.013,34,1.841,46,1.012,54,0.379,58,0.668,92,1.547,94,1.841,98,1.486,99,1.105,201,2.086,249,2.073,270,2.772,304,1.279,391,1.741,392,1.412,394,1.741,396,1.981,424,2.772,425,2.772,472,2.772,500,2.073,637,3.317,638,3.553,639,2.772,640,2.368,641,4.754,642,4.853,643,4.065,644,3.049,645,2.552,646,3.049,647,3.317,648,2.772,649,2.368,650,2.772,651,2.772,652,2.772,653,3.049,654,4.065,655,3.049,656,3.049,657,2.552,658,2.772]],["title/classes/ShoppingCart.html",[0,0.172,118,1.623]],["body/classes/ShoppingCart.html",[0,0.208,2,0.975,3,0.23,4,0.23,5,0.23,8,0.372,9,1.377,15,0.554,16,0.019,17,0.723,18,0.768,25,0.329,26,0.014,27,0.014,46,1.06,48,1.938,54,0.402,63,1.675,64,1.859,69,1.593,92,1.308,118,2.511,155,1.963,349,1.938,392,1.593,498,4.409,504,4.058,514,2.493,518,2.99,519,2.877,659,3.766,660,3.438,661,5.437,662,5.437,663,3.516,664,4.488,665,4.488,666,4.488,667,3.438,668,4.488,669,3.126,670,3.855]],["title/controllers/ShoppingCartController.html",[119,1.819,671,2.585]],["body/controllers/ShoppingCartController.html",[0,0.158,3,0.175,4,0.175,5,0.175,8,0.282,11,0.948,13,3.549,15,0.575,16,0.019,17,0.902,18,0.798,25,0.195,26,0.012,27,0.012,33,1.61,45,1.577,46,0.948,48,2.014,52,1.431,54,0.399,58,0.571,67,1.337,68,2.024,69,1.207,70,1.668,73,1.041,74,1.89,108,1.738,118,1.488,119,1.668,121,1.668,127,2.024,155,1.488,156,4.026,201,2.681,383,1.668,462,2.37,478,2.758,526,2.606,541,4.058,549,3.652,551,2.606,554,2.024,561,3.652,569,2.606,671,3.321,672,4.374,673,2.922,674,4.728,675,4.095,676,4.095,677,4.095,678,2.922,679,3.403,680,3.403,681,2.922,682,4.768,683,3.403,684,2.922,685,3.403,686,2.922,687,4.768,688,3.403,689,2.922,690,3.275,691,2.922,692,3.403,693,3.403,694,3.403,695,3.403,696,3.403,697,2.922,698,3.403,699,3.403,700,3.403,701,3.403]],["title/classes/ShoppingCartDto.html",[0,0.172,486,1.819]],["body/classes/ShoppingCartDto.html",[0,0.277,2,1.042,3,0.246,4,0.246,5,0.246,8,0.397,9,1.436,15,0.577,16,0.019,17,0.754,18,0.801,25,0.275,26,0.015,27,0.015,46,1.086,48,2.02,54,0.38,67,2.565,68,3.882,69,1.701,70,2.349,155,2.096,346,2.663,486,2.933,598,4.545,661,5.605,662,5.605,702,4.117,703,6.526,704,4.794,705,4.794]],["title/classes/ShoppingCartItem.html",[0,0.172,663,2.061]],["body/classes/ShoppingCartItem.html",[0,0.198,2,0.93,3,0.22,4,0.22,5,0.22,8,0.354,9,1.336,11,0.984,12,3.682,13,3.682,14,4.31,15,0.632,16,0.019,17,0.825,18,0.877,21,2.446,25,0.319,26,0.014,27,0.014,48,2.212,54,0.354,63,1.598,64,1.773,69,2.411,92,1.247,349,1.88,498,4.31,504,4.66,518,2.9,519,2.744,659,4.042,663,3.092,706,3.278,707,4.28,708,4.28,709,4.28,710,4.28,711,3.278,712,3.676]],["title/classes/ShoppingCartItemDto.html",[0,0.172,67,1.458]],["body/classes/ShoppingCartItemDto.html",[0,0.265,2,0.972,3,0.23,4,0.23,5,0.23,8,0.37,9,1.374,11,1.005,12,3.76,13,3.76,14,4.402,15,0.643,16,0.019,17,0.839,18,0.892,21,2.488,25,0.257,26,0.014,27,0.014,48,2.25,54,0.284,67,2.252,68,4.099,69,2.445,346,2.485,598,4.798,713,3.843,714,4.475,715,6.889,716,4.475,717,4.475,718,4.475]],["title/modules/ShoppingCartModule.html",[130,1.716,139,2.379]],["body/modules/ShoppingCartModule.html",[0,0.182,3,0.202,4,0.202,5,0.202,11,0.944,16,0.019,25,0.226,26,0.013,27,0.013,38,2.819,54,0.454,58,0.661,63,1.47,65,2.187,71,1.821,72,2.524,73,1.205,74,2.187,110,3.382,118,1.722,121,2.583,130,2.437,132,2.051,133,2.745,139,4.632,141,3.135,142,2.343,143,2.187,145,3.378,146,2.743,149,2.743,155,2.305,156,2.524,518,3.093,522,3.378,557,3.779,605,3.135,611,3.016,612,3.016,613,3.016,659,2.343,669,3.67,671,4.137,672,2.743,690,4.048,691,3.382,719,3.382,720,3.382,721,3.938,722,3.938,723,3.938,724,3.016]],["title/injectables/ShoppingCartService.html",[28,1.135,690,2.208]],["body/injectables/ShoppingCartService.html",[0,0.108,1,2.139,3,0.119,4,0.119,5,0.119,8,0.192,11,0.852,13,3.189,15,0.517,16,0.019,17,0.834,18,0.717,25,0.133,26,0.009,27,0.009,28,1.1,30,1.138,33,1.214,34,3.063,36,1.413,38,2.449,41,3.37,42,3.79,43,2.754,45,1.417,46,0.852,52,1.189,54,0.435,57,3.065,58,0.39,60,1.489,61,1.489,62,1.617,63,0.867,64,0.962,65,1.29,66,1.994,67,0.913,68,2.139,69,1.276,70,1.138,71,1.663,72,1.489,73,1.346,74,1.29,78,3.176,80,1.779,81,1.779,92,1.562,94,2.478,95,3.451,96,2.791,97,3.37,98,1.643,99,1.375,108,1.444,109,1.617,113,2.139,118,2.167,143,1.29,156,3.634,172,4.255,174,3.779,185,1.994,201,2.401,206,0.913,209,1.138,290,1.994,291,2.305,298,1.779,304,0.746,356,1.209,372,1.209,478,2.291,486,1.138,487,1.382,499,1.779,541,3.731,554,1.382,578,3.088,624,3.088,625,3.088,635,1.779,647,1.29,649,1.382,659,2.139,663,1.29,667,1.779,672,3.948,674,3.779,675,3.088,676,3.088,677,3.088,678,1.994,681,3.088,684,3.088,686,3.088,690,2.139,724,1.779,725,1.994,726,2.322,727,2.322,728,2.322,729,2.322,730,2.322,731,2.322,732,2.322,733,2.322,734,2.322,735,2.322,736,3.596,737,3.596,738,2.322,739,2.322,740,2.322,741,2.322,742,2.322,743,2.322,744,2.322,745,2.322,746,2.322,747,2.322,748,2.322,749,2.322,750,1.994,751,2.322,752,2.322]],["title/interfaces/Task.html",[637,2.061,647,2.061]],["body/interfaces/Task.html",[3,0.205,4,0.205,5,0.205,8,0.33,9,1.276,15,0.385,16,0.019,17,0.753,18,0.534,21,1.985,25,0.381,26,0.013,27,0.013,33,1.795,34,1.846,52,0.957,54,0.38,58,0.67,92,1.55,94,1.846,98,1.49,99,1.108,201,2.35,249,2.079,270,2.78,304,1.282,391,1.745,392,1.416,394,1.745,396,1.985,424,2.78,425,2.78,472,2.78,500,3.321,637,3.321,638,3.163,639,2.78,640,2.374,641,4.165,642,4.441,643,4.073,644,3.057,645,2.559,646,3.057,647,3.542,648,4.441,649,2.374,650,2.78,651,2.78,652,2.78,653,3.057,654,4.073,655,3.057,656,3.057,657,2.559,658,2.78,753,3.991]],["title/interfaces/TaskStatus.html",[637,2.061,645,2.379]],["body/interfaces/TaskStatus.html",[3,0.203,4,0.203,5,0.203,8,0.328,9,1.269,15,0.51,16,0.019,17,0.499,21,1.974,25,0.38,26,0.013,27,0.013,34,1.831,46,0.841,54,0.378,58,0.665,92,1.541,94,1.831,98,1.478,99,1.099,201,2.079,249,3.102,270,4.148,304,1.272,391,2.604,392,2.256,394,1.731,396,1.974,424,2.757,425,2.757,472,2.757,500,2.062,637,3.308,638,3.146,639,2.757,640,2.355,641,4.148,642,4.427,643,4.051,644,3.032,645,3.39,646,4.868,647,3.308,648,2.757,649,2.355,650,2.757,651,2.757,652,2.757,653,3.032,654,4.051,655,3.032,656,3.032,657,2.538,658,2.757]],["title/classes/UnauthenticatedError.html",[0,0.172,379,1.933]],["body/classes/UnauthenticatedError.html",[0,0.287,2,0.638,3,0.151,4,0.151,5,0.151,8,0.243,9,1.029,11,0.886,15,0.489,16,0.019,17,0.78,18,0.746,21,1.892,25,0.384,26,0.011,27,0.011,36,1.686,45,0.776,46,0.467,52,0.704,54,0.272,56,1.529,58,0.493,98,1.096,99,0.815,108,0.856,206,1.154,288,2.733,302,2.439,304,2.214,347,3.377,348,1.529,349,2.16,350,3.827,351,3.529,352,3.686,356,1.529,357,1.747,358,1.747,359,1.747,360,3.686,361,1.747,362,1.747,363,1.747,364,1.747,365,1.747,366,1.747,367,1.529,368,1.529,369,1.747,370,1.529,371,1.529,372,1.529,373,1.529,374,1.747,375,1.747,376,1.529,377,1.747,378,1.747,379,2.234,380,1.631,381,1.747,382,1.747,383,2.733,384,2.816,385,1.631,386,1.631,387,2.383,388,2.383,389,2.383,390,3.097,391,1.284,392,1.042,393,1.631,394,2.217,395,1.631,396,1.096,397,2.383,398,1.747,399,1.529,400,1.747,401,1.747,402,1.747,403,1.747,404,1.747,405,1.747,406,1.747,408,2.816,409,1.882,410,1.882,411,1.882,754,2.936]],["title/classes/UnauthorizedError.html",[0,0.172,376,1.933]],["body/classes/UnauthorizedError.html",[0,0.287,2,0.638,3,0.151,4,0.151,5,0.151,8,0.243,9,1.029,11,0.886,15,0.489,16,0.019,17,0.78,18,0.746,21,1.892,25,0.384,26,0.011,27,0.011,36,1.686,45,0.776,46,0.467,52,0.704,54,0.272,56,1.529,58,0.493,98,1.096,99,0.815,108,0.856,206,1.154,288,2.733,302,2.439,304,2.214,347,3.377,348,1.529,349,2.16,350,3.827,351,3.529,352,3.686,356,1.529,357,1.747,358,1.747,359,1.747,360,3.686,361,1.747,362,1.747,363,1.747,364,1.747,365,1.747,366,1.747,367,1.529,368,1.529,369,1.747,370,1.529,371,1.529,372,1.529,373,1.529,374,1.747,375,1.747,376,2.234,377,1.747,378,1.747,379,1.529,380,1.631,381,1.747,382,1.747,383,2.733,384,2.816,385,1.631,386,1.631,387,2.383,388,2.383,389,2.383,390,3.097,391,1.284,392,1.042,393,1.631,394,2.217,395,1.631,396,1.096,397,2.383,398,1.747,399,1.529,400,1.747,401,1.747,402,1.747,403,1.747,404,1.747,405,1.747,406,1.747,408,2.816,409,1.882,410,1.882,411,1.882,755,2.936]],["title/classes/UnauthorizedFilter.html",[0,0.172,325,2.585]],["body/classes/UnauthorizedFilter.html",[0,0.178,2,0.834,3,0.197,4,0.197,5,0.197,8,0.318,11,0.61,15,0.37,16,0.019,17,0.483,18,0.513,25,0.22,26,0.013,27,0.013,33,1.748,45,1.014,46,0.61,52,0.92,54,0.372,58,0.644,92,2.095,99,1.065,202,4.447,204,2.671,205,2.459,211,2.282,213,3.606,222,2.938,249,3.052,281,5.034,282,4.082,283,4.447,284,5.034,285,5.39,287,2.671,288,1.88,291,2.459,293,4.489,294,3.294,295,3.294,296,3.294,297,3.294,298,2.938,299,3.294,300,5.034,301,3.294,302,2.264,303,3.294,304,1.232,305,2.671,306,3.966,307,3.294,308,5.034,309,3.294,310,5.034,311,3.294,312,3.294,313,3.294,314,3.294,315,3.294,325,3.606,396,1.432,756,3.294,757,3.836,758,3.836,759,6.275,760,3.836,761,3.836,762,3.836,763,3.836,764,3.836]],["title/classes/User.html",[0,0.172,73,1.135]],["body/classes/User.html",[0,0.174,2,0.815,3,0.192,4,0.192,5,0.192,8,0.31,9,1.223,15,0.647,16,0.019,17,0.844,18,0.87,25,0.292,26,0.013,27,0.013,46,1.066,48,2.195,54,0.413,63,1.399,64,2.112,69,1.33,73,1.56,92,1.092,118,2.718,155,2.229,167,2.655,209,1.837,232,2.533,335,3.217,349,1.721,498,4.034,504,4.168,508,4.436,509,4.329,510,2.871,514,2.831,515,2.871,518,2.655,519,2.403,520,4.436,556,2.839,605,2.23,663,3.217,667,2.871,724,2.871,765,2.871,766,4.034,767,4.034,768,3.748,769,3.748,770,3.748,771,4.378,772,3.748,773,3.904,774,3.748,775,3.219,776,3.219]],["title/classes/UserDto.html",[0,0.172,488,1.716]],["body/classes/UserDto.html",[0,0.231,2,0.789,3,0.186,4,0.186,5,0.186,8,0.3,9,1.196,11,0.975,15,0.656,16,0.019,17,0.905,18,0.889,25,0.208,26,0.012,27,0.012,46,1.101,48,2.07,54,0.408,64,2.065,67,2.238,69,1.287,70,1.778,96,2.966,104,3.116,118,2.491,155,2.18,209,1.778,232,2.491,304,1.97,335,3.778,337,2.779,338,3.818,339,2.527,340,3.472,344,4.282,345,3.472,346,2.015,486,1.778,487,2.159,488,2.305,556,2.791,574,5.267,583,3.818,598,3.967,766,3.967,767,3.967,775,3.116,777,3.116,778,3.628,779,3.628,780,4.282,781,3.628,782,4.282,783,3.628,784,3.116,785,3.628,786,3.628,787,3.628,788,3.628]],["title/controllers/UserManagementController.html",[119,1.819,789,2.585]],["body/controllers/UserManagementController.html",[0,0.125,3,0.139,4,0.139,5,0.139,8,0.224,11,0.912,15,0.553,16,0.019,17,0.825,18,0.835,25,0.155,26,0.01,27,0.01,33,1.365,40,2.519,45,1.518,46,0.912,48,2.105,52,1.496,54,0.416,58,0.455,73,0.829,75,3.814,76,3.56,77,1.887,108,1.817,119,1.328,121,1.328,127,1.612,201,2.749,209,1.328,228,2.816,232,1.185,239,3.679,306,2.076,333,3.814,383,1.328,462,2.816,488,1.253,490,2.794,526,2.076,533,3.473,534,2.327,541,3.191,547,2.327,549,3.097,550,2.327,551,3.097,552,2.327,553,2.327,554,1.612,556,1.328,561,2.076,564,5.169,565,3.473,568,2.327,569,2.076,689,2.327,697,2.327,789,2.816,790,2.327,791,2.71,792,4.607,793,3.473,794,3.473,795,3.473,796,4.607,797,3.473,798,4.155,799,2.71,800,2.327,801,3.439,802,2.71,803,2.71,804,2.327,805,2.71,806,2.71,807,2.327,808,2.71,809,2.71,810,2.71,811,2.71,812,2.327,813,2.71,814,2.71,815,2.327,816,4.607,817,4.044,818,4.044,819,2.71,820,2.327,821,1.887,822,2.327,823,2.327,824,2.71,825,4.155,826,2.71,827,2.71,828,2.71,829,2.71,830,2.71,831,2.71,832,2.71,833,2.71,834,2.71,835,2.71,836,2.71,837,2.71,838,2.71]],["title/modules/UserManagementModule.html",[130,1.716,140,2.379]],["body/modules/UserManagementModule.html",[0,0.183,3,0.203,4,0.203,5,0.203,11,0.839,16,0.019,25,0.226,26,0.013,27,0.013,38,2.821,40,3.824,54,0.449,58,0.663,63,1.474,65,2.193,73,1.82,74,2.193,75,2.349,76,2.193,77,2.75,121,2.587,130,2.441,132,2.056,133,2.75,140,4.673,141,3.141,142,2.349,143,2.193,145,3.384,146,2.75,149,2.75,194,3.337,518,2.75,605,3.141,606,2.349,607,3.384,608,2.349,609,3.024,610,3.024,611,3.024,613,3.024,614,3.391,789,4.142,839,3.391,840,3.948,841,3.391,842,3.948,843,5.279,844,3.948]],["title/injectables/UserManagementService.html",[28,1.135,40,1.933]],["body/injectables/UserManagementService.html",[0,0.08,3,0.089,4,0.089,5,0.089,8,0.144,11,0.874,15,0.53,16,0.019,17,0.717,18,0.785,25,0.1,26,0.007,27,0.007,28,0.873,30,0.852,33,0.963,34,3.204,36,1.121,37,1.331,38,2.066,40,1.486,41,2.78,42,3.377,45,1.455,46,0.874,52,1.366,54,0.413,57,1.987,58,0.292,62,1.21,63,0.649,64,1.182,65,0.965,73,1.794,74,0.965,75,3.574,76,3.336,78,2.693,80,1.331,91,2.185,92,1.936,93,3.985,94,2.973,95,2.926,96,1.89,97,3.553,98,1.065,99,0.792,108,1.66,109,1.21,148,1.21,194,2.582,201,2.557,206,0.683,209,0.852,210,1.034,211,1.034,228,2.528,229,1.331,232,1.248,235,1.492,291,1.829,333,3.714,335,2.769,336,3.231,356,0.905,368,1.89,371,0.905,372,0.905,417,1.492,420,3.218,426,1.21,464,2.45,488,1.943,490,2.188,541,2.76,554,1.034,556,0.852,606,1.034,608,1.034,609,1.331,610,1.331,627,3.608,630,1.492,632,1.492,635,1.331,792,3.608,793,2.45,794,2.45,795,2.45,796,3.608,797,2.45,798,3.117,800,2.45,801,1.829,804,2.45,807,2.45,812,2.45,815,1.492,816,3.608,820,1.492,821,1.21,822,1.492,823,1.492,825,1.492,845,1.492,846,2.853,847,2.853,848,3.629,849,1.738,850,1.738,851,2.853,852,1.738,853,1.738,854,1.738,855,1.738,856,1.738,857,1.738,858,1.738,859,2.853,860,1.738,861,1.738,862,1.738,863,2.45,864,1.738,865,1.738,866,2.853,867,1.738,868,2.853,869,1.738,870,1.738,871,1.738,872,1.738,873,1.738,874,1.738,875,1.738,876,1.738,877,4.201,878,1.738,879,3.629,880,1.738,881,2.853,882,1.738,883,2.853,884,1.738,885,1.738,886,1.738,887,2.853,888,1.738,889,1.738,890,1.738,891,1.738,892,1.738,893,1.738,894,1.738,895,1.738,896,3.629,897,1.738,898,1.738,899,2.853,900,1.738,901,1.738,902,1.738,903,1.738,904,1.738,905,1.738,906,1.738,907,1.738,908,1.738,909,1.738,910,1.738,911,1.738,912,1.738]],["title/classes/UserWithPassword.html",[0,0.172,606,2.208]],["body/classes/UserWithPassword.html",[0,0.181,2,0.849,3,0.201,4,0.201,5,0.201,8,0.323,9,1.257,15,0.669,16,0.019,17,0.873,18,0.908,25,0.301,26,0.013,27,0.013,46,1.079,48,2.292,54,0.333,63,1.458,73,2.157,92,1.138,118,2.292,167,3.081,232,2.292,335,2.911,336,4.12,349,1.77,408,3.662,483,2.504,504,3.36,508,4.531,509,3.651,510,2.992,514,2.17,515,4.015,518,2.73,519,2.504,520,4.015,556,1.915,606,3.118,607,2.504,608,3.118,663,2.17,766,3.651,767,3.651,771,3.355,773,2.992,913,2.992,914,3.907,915,3.907,916,3.907,917,3.907,918,3.907,919,3.907,920,3.355]],["title/classes/UserWithPasswordDto.html",[0,0.172,801,2.379]],["body/classes/UserWithPasswordDto.html",[0,0.241,2,0.842,3,0.199,4,0.199,5,0.199,8,0.321,9,1.251,11,0.829,15,0.667,16,0.019,17,0.871,18,0.926,25,0.222,26,0.013,27,0.013,46,1.118,48,2.22,54,0.331,67,1.523,96,2.716,118,2.28,232,2.28,304,1.245,335,3.5,336,4.581,337,2.969,338,2.969,339,2.7,340,4.104,342,2.969,345,3.632,346,2.153,349,1.76,408,3.762,488,3.296,489,2.485,556,1.899,583,3.994,766,3.632,767,3.632,780,3.329,782,3.329,784,3.329,801,3.343,821,3.632,921,3.329,922,3.876,923,3.876,924,3.876,925,3.876,926,3.876,927,3.876,928,3.876]],["title/coverage.html",[929,3.878]],["body/coverage.html",[0,0.333,1,1.325,5,0.114,6,1.913,7,1.913,15,0.215,16,0.019,26,0.009,27,0.009,28,1.843,29,1.428,31,1.913,32,1.913,38,0.923,40,1.16,67,0.875,68,2.071,69,1.521,71,1.03,73,0.682,75,2.071,76,1.934,99,0.618,118,0.974,119,2.374,120,1.552,122,1.913,125,1.325,156,2.232,170,1.913,188,1.706,189,1.552,191,1.913,194,1.092,206,0.875,207,1.706,208,1.706,210,1.325,232,0.974,238,1.913,239,1.428,278,1.552,279,1.913,280,1.913,325,1.552,328,1.552,333,1.325,334,1.913,347,1.092,348,3.225,367,1.16,370,1.16,373,1.16,376,1.16,379,1.16,394,2.437,396,0.832,413,3.711,426,1.552,428,1.706,430,1.706,448,2.667,478,1.03,479,3.106,484,1.092,486,1.092,488,1.03,490,1.16,492,1.325,494,1.325,497,2.667,522,1.428,524,1.552,525,1.913,557,1.237,572,1.913,605,1.325,606,1.325,607,1.428,608,2.071,615,1.913,637,2.38,638,1.325,640,3.127,645,1.428,647,1.237,649,1.325,652,5.332,657,1.428,659,2.882,660,2.667,663,1.237,669,1.552,671,1.552,672,2.425,673,1.913,690,1.325,702,1.913,706,2.667,711,1.706,713,1.913,725,1.913,756,1.913,765,2.667,777,1.913,789,1.552,790,1.913,801,1.428,821,1.552,845,1.913,913,2.667,921,1.913,929,1.706,930,2.228,931,2.228,932,2.228,933,4.845,934,6.192,935,1.913,936,6.967,937,7.293,938,1.913,939,4.161,940,1.913,941,1.913,942,1.913,943,1.913,944,1.913,945,4.845,946,2.228,947,4.845,948,1.913,949,1.913,950,2.228,951,6.192,952,4.285,953,2.228,954,2.985,955,1.913,956,2.228,957,2.228]],["title/dependencies.html",[133,2.324,958,2.662]],["body/dependencies.html",[0,0.278,16,0.019,26,0.015,27,0.015,58,0.81,60,3.093,61,3.093,63,1.801,64,1.999,133,2.513,148,3.361,203,3.696,205,3.093,346,2.68,457,4.144,481,3.093,482,3.093,863,4.144,959,6.545,960,4.825,961,4.825,962,4.825,963,4.825,964,4.825,965,4.825,966,4.825,967,4.825,968,4.825,969,4.825,970,4.825,971,4.825,972,3.696,973,6.009,974,4.825,975,4.825,976,4.825,977,4.825,978,4.825,979,4.825,980,4.825,981,4.825]],["title/miscellaneous/enumerations.html",[982,1.614,983,3.833]],["body/miscellaneous/enumerations.html",[8,0.459,16,0.018,26,0.016,27,0.016,392,2.468,556,3.206,954,3.866,982,2.891,983,4.767,984,4.251,985,6.542,986,6.542,987,5.551,988,5.551]],["title/miscellaneous/functions.html",[982,1.614,989,3.833]],["body/miscellaneous/functions.html",[8,0.335,11,1.06,15,0.517,16,0.018,26,0.013,27,0.013,45,1.764,46,1.06,52,1.6,201,1.59,210,3.192,249,3.135,257,3.475,287,2.818,288,3.142,302,2.346,304,2.06,305,2.818,347,1.983,348,2.107,350,3.705,384,2.98,385,2.247,386,2.247,387,2.98,388,2.98,389,2.98,390,3.344,391,1.769,392,1.904,393,2.247,395,2.247,396,2.003,397,2.247,399,2.107,448,3.099,475,3.475,500,2.107,514,2.247,638,3.192,640,2.407,641,3.737,642,3.737,647,3.344,649,3.192,650,2.818,651,2.818,944,4.608,948,3.475,949,5.171,955,4.608,982,2.107,989,3.475,990,6.02,991,4.046,992,4.046,993,3.475,994,4.046,995,4.046]],["title/index.html",[8,0.257,996,3.1,997,3.1]],["body/index.html",[4,0.224,16,0.019,26,0.014,27,0.014,160,3.741,500,2.269,648,4.874,750,3.741,929,3.336,972,4.78,998,4.356,999,4.356,1000,5.631,1001,4.356,1002,4.356,1003,4.356,1004,4.356,1005,4.356,1006,4.356,1007,4.356,1008,4.356,1009,4.356,1010,4.356,1011,7.121,1012,4.356,1013,4.356,1014,4.356,1015,4.356,1016,5.631,1017,4.356,1018,4.356,1019,4.356,1020,4.356,1021,5.631,1022,5.631,1023,4.356,1024,4.356,1025,4.356,1026,5.631,1027,5.631,1028,4.356,1029,4.356,1030,4.356,1031,4.356,1032,4.356,1033,3.741,1034,4.356,1035,4.356,1036,4.356,1037,4.356,1038,4.356,1039,4.356,1040,4.356,1041,4.356,1042,4.356,1043,3.741,1044,4.356,1045,4.356,1046,4.356,1047,4.356,1048,4.356,1049,4.356,1050,3.741]],["title/modules.html",[132,2.637]],["body/modules.html",[16,0.016,26,0.016,27,0.016,131,3.767,132,2.817,137,3.467,138,3.467,139,3.467,140,3.467,1033,6.249,1051,7.276,1052,7.276,1053,7.276]],["title/overview.html",[1054,4.348]],["body/overview.html",[2,0.847,16,0.019,26,0.013,27,0.013,29,3.787,30,1.909,38,2.81,40,3.669,113,2.318,121,1.909,125,3.515,131,5.103,132,2.029,133,2.725,134,3.346,135,3.346,136,3.346,137,4.443,138,4.726,139,4.575,140,4.623,141,3.113,142,2.318,143,2.164,188,2.984,194,3.229,316,3.346,317,3.346,557,3.508,600,3.346,601,3.346,639,2.714,690,3.515,719,3.346,720,3.346,839,3.346,841,3.346,1054,3.346,1055,3.896,1056,3.896,1057,3.896,1058,3.896,1059,3.896]],["title/properties.html",[9,1.07,958,2.662]],["body/properties.html",[9,1.373,16,0.019,26,0.016,27,0.016,500,2.98,1043,4.915,1050,4.915,1060,5.723,1061,5.723,1062,5.723]],["title/miscellaneous/typealiases.html",[982,1.614,1063,4.462]],["body/miscellaneous/typealiases.html",[8,0.466,15,0.675,16,0.016,26,0.016,27,0.016,333,3.927,420,5.055,954,3.925,982,2.935,984,5.055,1064,5.635,1065,6.6]],["title/miscellaneous/variables.html",[982,1.614,1066,3.833]],["body/miscellaneous/variables.html",[3,0.232,8,0.261,15,0.63,16,0.019,17,0.725,26,0.011,27,0.011,53,3.876,69,1.601,167,1.64,206,1.774,207,3.457,208,3.457,214,2.704,232,1.974,239,2.893,302,1.974,305,3.674,392,2.605,413,2.412,426,3.143,427,2.704,428,3.457,429,2.704,430,3.457,431,2.704,497,2.412,514,4.077,522,2.893,523,2.704,556,2.585,605,2.685,607,2.893,608,1.873,640,1.873,657,2.893,658,2.193,659,2.685,660,3.457,669,3.143,670,2.704,706,3.457,711,3.457,712,2.704,765,2.412,773,2.412,776,2.704,913,3.457,920,2.704,935,2.704,938,2.704,939,2.704,940,3.876,941,3.876,942,3.876,943,3.876,954,2.193,972,2.412,982,1.64,984,5.006,993,2.704,1066,2.704,1067,5.275,1068,3.149,1069,3.149,1070,3.149,1071,4.513,1072,3.149,1073,3.149,1074,4.513,1075,4.513,1076,4.513,1077,4.513,1078,4.513,1079,4.513,1080,3.149,1081,6.099,1082,3.149,1083,3.149,1084,3.149,1085,3.149,1086,3.149,1087,3.149,1088,3.149,1089,3.149,1090,3.149,1091,3.149,1092,3.149,1093,3.149,1094,3.149,1095,3.149,1096,4.513,1097,4.513,1098,4.513,1099,3.149,1100,3.149]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":652,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1061,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":113,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"injectables/ShoppingCartService.html":{},"overview.html":{}}}],["1.2.0",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["1.3.1",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":650,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"miscellaneous/functions.html":{}}}],["100",{"_index":651,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"miscellaneous/functions.html":{}}}],["2.2.0",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":1058,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1059,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["3.8.2",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1056,"title":{},"body":{"overview.html":{}}}],["404",{"_index":447,"title":{},"body":{"injectables/JWTService.html":{}}}],["499",{"_index":181,"title":{},"body":{"injectables/AppService.html":{}}}],["5",{"_index":1055,"title":{},"body":{"overview.html":{}}}],["6.7.0",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":436,"title":{},"body":{"injectables/JWTService.html":{}}}],["7.2.0",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1057,"title":{},"body":{"overview.html":{}}}],["8.5.1",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["__namedparameters",{"_index":995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["_id",{"_index":96,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/JWTService.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"classes/UserDto.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPasswordDto.html":{}}}],["add",{"_index":104,"title":{},"body":{"injectables/AddToCartListener.html":{},"classes/UserDto.html":{}}}],["added",{"_index":747,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["additemtocart",{"_index":674,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["additemtocart(id",{"_index":678,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["addtocart",{"_index":737,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["addtocart.belongsto",{"_index":738,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["addtocart.name",{"_index":739,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["addtocart.price",{"_index":744,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["addtocart.productid",{"_index":741,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["addtocart.quantity",{"_index":743,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["addtocartevent",{"_index":1,"title":{"classes/AddToCartEvent.html":{}},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{}}}],["addtocartlistener",{"_index":29,"title":{"injectables/AddToCartListener.html":{}},"body":{"injectables/AddToCartListener.html":{},"modules/ProductModule.html":{},"coverage.html":{},"overview.html":{}}}],["addtocarttest",{"_index":177,"title":{},"body":{"injectables/AppService.html":{}}}],["addtocarttest.name",{"_index":178,"title":{},"body":{"injectables/AppService.html":{}}}],["addtocarttest.price",{"_index":180,"title":{},"body":{"injectables/AppService.html":{}}}],["addtocarttest.productid",{"_index":182,"title":{},"body":{"injectables/AppService.html":{}}}],["addtocarttest.quantity",{"_index":184,"title":{},"body":{"injectables/AppService.html":{}}}],["admin",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":312,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["aliases",{"_index":1064,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all.filter",{"_index":324,"title":{},"body":{"modules/CommonModule.html":{}}}],["all.filter.ts",{"_index":280,"title":{},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{}}}],["all.filter.ts:22",{"_index":286,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["allowinfinity",{"_index":599,"title":{},"body":{"classes/ProductDto.html":{}}}],["allownan",{"_index":591,"title":{},"body":{"classes/ProductDto.html":{}}}],["allproducts",{"_index":622,"title":{},"body":{"injectables/ProductService.html":{}}}],["allusers",{"_index":866,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["already",{"_index":629,"title":{},"body":{"injectables/ProductService.html":{}}}],["amazing",{"_index":1034,"title":{},"body":{"index.html":{}}}],["app",{"_index":1013,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":126,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":320,"title":{},"body":{"modules/CommonModule.html":{}}}],["app_guard",{"_index":321,"title":{},"body":{"modules/CommonModule.html":{}}}],["app_interceptor",{"_index":322,"title":{},"body":{"modules/CommonModule.html":{}}}],["appcontroller",{"_index":120,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1006,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":131,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":125,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argshost",{"_index":284,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["argshost.switchtohttp",{"_index":295,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["argumentshost",{"_index":285,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["array",{"_index":773,"title":{},"body":{"classes/User.html":{},"classes/UserWithPassword.html":{},"miscellaneous/variables.html":{}}}],["asdfsdfadfasdfa",{"_index":183,"title":{},"body":{"injectables/AppService.html":{}}}],["assert",{"_index":210,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JWTService.html":{},"injectables/ProductService.html":{},"injectables/UserManagementService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["assert(!doesuserexist",{"_index":878,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["assert(credentials",{"_index":892,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["assert(findproduct",{"_index":626,"title":{},"body":{"injectables/ProductService.html":{}}}],["assert(finduser",{"_index":894,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["assert(password",{"_index":897,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["assert(predicate",{"_index":395,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["assert(token",{"_index":439,"title":{},"body":{"injectables/JWTService.html":{}}}],["assert(userexists",{"_index":869,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["asserted",{"_index":385,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["assertion",{"_index":388,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["async",{"_index":34,"title":{},"body":{"injectables/AddToCartListener.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"injectables/JWTService.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"injectables/UserManagementService.html":{}}}],["auth",{"_index":227,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authguard",{"_index":189,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/CommonModule.html":{},"coverage.html":{}}}],["author",{"_index":1043,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":94,"title":{},"body":{"injectables/AddToCartListener.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"injectables/JWTService.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"injectables/UserManagementService.html":{}}}],["backers",{"_index":1035,"title":{},"body":{"index.html":{}}}],["badgatewayexception",{"_index":289,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["badrequestexception",{"_index":290,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/ShoppingCartService.html":{}}}],["bcryptjs",{"_index":863,"title":{},"body":{"injectables/UserManagementService.html":{},"dependencies.html":{}}}],["before",{"_index":87,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["belongsto",{"_index":10,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{}}}],["blue",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":549,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["bold",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":391,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":949,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1053,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1051,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1001,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":452,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["canactivate",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cart",{"_index":69,"title":{},"body":{"injectables/AddToCartListener.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cart.controller",{"_index":722,"title":{},"body":{"modules/ShoppingCartModule.html":{}}}],["cart.controller.ts",{"_index":673,"title":{},"body":{"controllers/ShoppingCartController.html":{},"coverage.html":{}}}],["cart.controller.ts:20",{"_index":688,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["cart.controller.ts:25",{"_index":685,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["cart.controller.ts:31",{"_index":680,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["cart.controller.ts:39",{"_index":683,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["cart.dto",{"_index":487,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"injectables/ShoppingCartService.html":{},"classes/UserDto.html":{}}}],["cart.dto.ts",{"_index":702,"title":{},"body":{"classes/ShoppingCartDto.html":{},"coverage.html":{}}}],["cart.dto.ts:6",{"_index":705,"title":{},"body":{"classes/ShoppingCartDto.html":{}}}],["cart.dto.ts:9",{"_index":704,"title":{},"body":{"classes/ShoppingCartDto.html":{}}}],["cart.event.ts",{"_index":7,"title":{},"body":{"classes/AddToCartEvent.html":{},"coverage.html":{}}}],["cart.event.ts:2",{"_index":19,"title":{},"body":{"classes/AddToCartEvent.html":{}}}],["cart.event.ts:3",{"_index":23,"title":{},"body":{"classes/AddToCartEvent.html":{}}}],["cart.event.ts:4",{"_index":20,"title":{},"body":{"classes/AddToCartEvent.html":{}}}],["cart.event.ts:5",{"_index":24,"title":{},"body":{"classes/AddToCartEvent.html":{}}}],["cart.event.ts:6",{"_index":22,"title":{},"body":{"classes/AddToCartEvent.html":{}}}],["cart.listener.ts",{"_index":32,"title":{},"body":{"injectables/AddToCartListener.html":{},"coverage.html":{}}}],["cart.listener.ts:13",{"_index":44,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["cart.listener.ts:21",{"_index":50,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["cart.model",{"_index":724,"title":{},"body":{"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{}}}],["cart.model.ts",{"_index":660,"title":{},"body":{"classes/ShoppingCart.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cart.model.ts:11",{"_index":665,"title":{},"body":{"classes/ShoppingCart.html":{}}}],["cart.model.ts:8",{"_index":666,"title":{},"body":{"classes/ShoppingCart.html":{}}}],["cart.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["cart.module.ts",{"_index":721,"title":{},"body":{"modules/ShoppingCartModule.html":{}}}],["cart.service",{"_index":691,"title":{},"body":{"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{}}}],["cart.service.ts",{"_index":725,"title":{},"body":{"injectables/ShoppingCartService.html":{},"coverage.html":{}}}],["cart.service.ts:24",{"_index":727,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["cart.service.ts:32",{"_index":730,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["cart.service.ts:40",{"_index":731,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["cart.service.ts:48",{"_index":729,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["cart.service.ts:57",{"_index":728,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["cart/product",{"_index":748,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["cart/shopping",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{}}}],["catch",{"_index":282,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/UnauthorizedFilter.html":{}}}],["catch(exception",{"_index":283,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["catch(forbiddenexception",{"_index":760,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["catchallfilter",{"_index":278,"title":{"classes/CatchAllFilter.html":{}},"body":{"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"coverage.html":{}}}],["check",{"_index":84,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["class",{"_index":0,"title":{"classes/AddToCartEvent.html":{},"classes/CatchAllFilter.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"classes/ProductDto.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddToCartEvent.html":{},"classes/CatchAllFilter.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"classes/ProductDto.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"overview.html":{}}}],["clearusercart",{"_index":675,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["clearusercart(@param('id",{"_index":700,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["clearusercart(id",{"_index":681,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["clearuserdb",{"_index":792,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["cluster_appmodule",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":316,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_providers",{"_index":317,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":600,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_providers",{"_index":601,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_shoppingcartmodule",{"_index":719,"title":{},"body":{"modules/ShoppingCartModule.html":{},"overview.html":{}}}],["cluster_shoppingcartmodule_providers",{"_index":720,"title":{},"body":{"modules/ShoppingCartModule.html":{},"overview.html":{}}}],["cluster_usermanagementmodule",{"_index":839,"title":{},"body":{"modules/UserManagementModule.html":{},"overview.html":{}}}],["cluster_usermanagementmodule_exports",{"_index":841,"title":{},"body":{"modules/UserManagementModule.html":{},"overview.html":{}}}],["cluster_usermanagementmodule_providers",{"_index":840,"title":{},"body":{"modules/UserManagementModule.html":{}}}],["code",{"_index":350,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["common/common.module",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["commonmodule",{"_index":137,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":864,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["compare(credentials.password",{"_index":900,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["configmodule",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":417,"title":{},"body":{"injectables/JWTService.html":{},"injectables/UserManagementService.html":{}}}],["conflict",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('exists",{"_index":107,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["console.log(`${role",{"_index":237,"title":{},"body":{"guards/AuthGuard.html":{}}}],["console.log(err",{"_index":438,"title":{},"body":{"injectables/JWTService.html":{}}}],["console.log(requiredroles.length",{"_index":236,"title":{},"body":{"guards/AuthGuard.html":{}}}],["const",{"_index":92,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{}}}],["constants",{"_index":357,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["constructor",{"_index":36,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"classes/NotFoundError.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"injectables/UserManagementService.html":{}}}],["constructor(configservice",{"_index":416,"title":{},"body":{"injectables/JWTService.html":{}}}],["constructor(crudservice",{"_index":37,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ProductService.html":{},"injectables/UserManagementService.html":{}}}],["constructor(eventemitter",{"_index":171,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(jwtservice",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(message",{"_index":352,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["constructor(private",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JWTService.html":{},"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["constructor(productmodel",{"_index":726,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["context",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["context.getclass",{"_index":219,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":216,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":223,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest().method",{"_index":460,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest().url",{"_index":461,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest()?.body",{"_index":463,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["controller",{"_index":119,"title":{"controllers/AppController.html":{},"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{},"coverage.html":{}}}],["controller('products",{"_index":559,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('shoppingcart",{"_index":692,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["controller('users",{"_index":824,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["controllers",{"_index":121,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"overview.html":{}}}],["converttouserprofile",{"_index":846,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["converttouserprofile(user",{"_index":851,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["count",{"_index":577,"title":{},"body":{"classes/ProductDto.html":{}}}],["countinstock",{"_index":499,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{},"injectables/ShoppingCartService.html":{}}}],["coverage",{"_index":929,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":240,"title":{},"body":{"injectables/CRUDService.html":{}}}],["create(input",{"_index":246,"title":{},"body":{"injectables/CRUDService.html":{}}}],["createnewuser",{"_index":793,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["createnewuser(@body",{"_index":832,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["createnewuser(credentials",{"_index":800,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["creating",{"_index":872,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["credentials",{"_index":333,"title":{"classes/Credentials.html":{}},"body":{"classes/Credentials.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["credentials.email",{"_index":877,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["credentials.password",{"_index":880,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["creds",{"_index":893,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["crudservice",{"_index":38,"title":{"injectables/CRUDService.html":{}},"body":{"injectables/AddToCartListener.html":{},"injectables/CRUDService.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"coverage.html":{},"overview.html":{}}}],["ctx",{"_index":294,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["ctx.getrequest",{"_index":297,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["ctx.getresponse",{"_index":296,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["customer",{"_index":985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["date",{"_index":470,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["date().toisostring",{"_index":315,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["date().tolocalestring",{"_index":471,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["date.now",{"_index":465,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["dd",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debug",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decodedtoken",{"_index":440,"title":{},"body":{"injectables/JWTService.html":{}}}],["decodedtoken._id",{"_index":442,"title":{},"body":{"injectables/JWTService.html":{}}}],["decodedtoken.email",{"_index":443,"title":{},"body":{"injectables/JWTService.html":{}}}],["decodedtoken.role",{"_index":444,"title":{},"body":{"injectables/JWTService.html":{}}}],["decodetoken",{"_index":230,"title":{},"body":{"guards/AuthGuard.html":{}}}],["decorators",{"_index":48,"title":{},"body":{"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"classes/Credentials.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["default",{"_index":514,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["delete",{"_index":462,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["delete(':id",{"_index":682,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["deleteallproducts",{"_index":528,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["deletemany",{"_index":241,"title":{},"body":{"injectables/CRUDService.html":{}}}],["deletemany(model",{"_index":251,"title":{},"body":{"injectables/CRUDService.html":{}}}],["deleteone",{"_index":242,"title":{},"body":{"injectables/CRUDService.html":{}}}],["deleteone(filter",{"_index":258,"title":{},"body":{"injectables/CRUDService.html":{}}}],["deleteresult",{"_index":275,"title":{},"body":{"injectables/CRUDService.html":{}}}],["dependencies",{"_index":133,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":500,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":501,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{}}}],["detected",{"_index":229,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JWTService.html":{},"injectables/UserManagementService.html":{}}}],["development",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["document",{"_index":498,"title":{},"body":{"classes/Product.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"classes/User.html":{}}}],["documentation",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["doesproductexist",{"_index":628,"title":{},"body":{"injectables/ProductService.html":{}}}],["doesuserexist",{"_index":876,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["domainerror",{"_index":347,"title":{"classes/DomainError.html":{}},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["domainerror(message",{"_index":398,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["domainerror:5",{"_index":410,"title":{},"body":{"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["domainerror:6",{"_index":409,"title":{},"body":{"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["domainerror:7",{"_index":411,"title":{},"body":{"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["done",{"_index":646,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["e2e",{"_index":1023,"title":{},"body":{"index.html":{}}}],["ecommerce",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":1002,"title":{},"body":{"index.html":{}}}],["email",{"_index":335,"title":{},"body":{"classes/Credentials.html":{},"injectables/JWTService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["emitted",{"_index":83,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["emitter",{"_index":61,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/ShoppingCartService.html":{},"dependencies.html":{}}}],["empty",{"_index":340,"title":{},"body":{"classes/Credentials.html":{},"classes/ProductDto.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["empty'})@ispositive({message",{"_index":593,"title":{},"body":{"classes/ProductDto.html":{}}}],["enumerations",{"_index":983,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":437,"title":{},"body":{"injectables/JWTService.html":{}}}],["error",{"_index":302,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["error.capturestacktrace(this",{"_index":365,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["error.utils",{"_index":644,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["error_codes",{"_index":206,"title":{},"body":{"guards/AuthGuard.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"classes/NotFoundError.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"injectables/UserManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_codes.conflict",{"_index":630,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserManagementService.html":{}}}],["error_codes.invalid_input",{"_index":374,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["error_codes.invalid_request",{"_index":371,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"injectables/UserManagementService.html":{}}}],["error_codes.not_found",{"_index":368,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"injectables/ProductService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"injectables/UserManagementService.html":{}}}],["error_codes.unauthenticated",{"_index":380,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["error_codes.unauthorized",{"_index":377,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["error_codes.unknown",{"_index":358,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["event",{"_index":51,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["event.name",{"_index":103,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["event.price",{"_index":116,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["event.quantity",{"_index":115,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["eventemitter",{"_index":174,"title":{},"body":{"injectables/AppService.html":{},"injectables/ShoppingCartService.html":{}}}],["eventemitter2",{"_index":172,"title":{},"body":{"injectables/AppService.html":{},"injectables/ShoppingCartService.html":{}}}],["eventemittermodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":176,"title":{},"body":{"injectables/AppService.html":{}}}],["exception",{"_index":287,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/UnauthorizedFilter.html":{},"miscellaneous/functions.html":{}}}],["exception.getresponse",{"_index":301,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["exception.getstatus",{"_index":299,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["exception.message",{"_index":402,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["exception.stack",{"_index":405,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["exception?.message",{"_index":401,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["exception?.stack",{"_index":403,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["exceptionfilter",{"_index":281,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["exceptionresponse",{"_index":300,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["executioncontext",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["exist",{"_index":633,"title":{},"body":{"injectables/ProductService.html":{}}}],["exists",{"_index":91,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ProductService.html":{},"injectables/UserManagementService.html":{}}}],["expiresin",{"_index":435,"title":{},"body":{"injectables/JWTService.html":{}}}],["export",{"_index":25,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["exports",{"_index":843,"title":{},"body":{"modules/UserManagementModule.html":{}}}],["express",{"_index":205,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CatchAllFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/UnauthorizedFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":349,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["failed",{"_index":655,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["false",{"_index":509,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["false/falsy",{"_index":389,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{}}}],["filter",{"_index":252,"title":{},"body":{"injectables/CRUDService.html":{}}}],["filterquery",{"_index":253,"title":{},"body":{"injectables/CRUDService.html":{}}}],["filters/catch",{"_index":323,"title":{},"body":{"modules/CommonModule.html":{}}}],["filters/unauthorized.filter",{"_index":326,"title":{},"body":{"modules/CommonModule.html":{}}}],["find",{"_index":895,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["findmany",{"_index":243,"title":{},"body":{"injectables/CRUDService.html":{}}}],["findmany(model",{"_index":260,"title":{},"body":{"injectables/CRUDService.html":{}}}],["findone",{"_index":244,"title":{},"body":{"injectables/CRUDService.html":{}}}],["findone(filter",{"_index":264,"title":{},"body":{"injectables/CRUDService.html":{}}}],["findproduct",{"_index":624,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{}}}],["findproduct._id",{"_index":742,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["findproduct.countinstock",{"_index":736,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["findproduct.name",{"_index":740,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["findproduct.price",{"_index":745,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["finduser",{"_index":93,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/UserManagementService.html":{}}}],["finduser.shoppingcart.find(x",{"_index":101,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["first",{"_index":780,"title":{},"body":{"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["firstname",{"_index":766,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["forbiddenexception",{"_index":758,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["found",{"_index":627,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserManagementService.html":{}}}],["framework",{"_index":1000,"title":{},"body":{"index.html":{}}}],["func",{"_index":871,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["funcs",{"_index":382,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["function",{"_index":394,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{}}}],["functions",{"_index":989,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":414,"title":{},"body":{"injectables/JWTService.html":{}}}],["generatetoken(userprofile",{"_index":419,"title":{},"body":{"injectables/JWTService.html":{}}}],["gensalt",{"_index":861,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["gensalt(12",{"_index":882,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["get(':id",{"_index":561,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["get(':id/count",{"_index":687,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["get('me",{"_index":826,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["getallproducts",{"_index":529,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["gethello",{"_index":123,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getobjectclone",{"_index":944,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getobjectclone(object",{"_index":475,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/functions.html":{}}}],["getproductbyid",{"_index":530,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getproductbyid(@param('id",{"_index":562,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductbyid(id",{"_index":538,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getshoppingcart",{"_index":676,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["getshoppingcart(@param('id",{"_index":695,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["getshoppingcart(id",{"_index":684,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["getshoppingcartcount",{"_index":677,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["getshoppingcartcount(@param('id",{"_index":693,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["getshoppingcartcount(id",{"_index":686,"title":{},"body":{"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{}}}],["getting",{"_index":996,"title":{"index.html":{}},"body":{}}],["gettokenheader",{"_index":224,"title":{},"body":{"guards/AuthGuard.html":{}}}],["getuserbyid",{"_index":794,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["getuserbyid(@param('id",{"_index":830,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["getuserbyid(id",{"_index":804,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["global",{"_index":319,"title":{},"body":{"modules/CommonModule.html":{}}}],["green",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grow",{"_index":1030,"title":{},"body":{"index.html":{}}}],["guard",{"_index":188,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guards/auth.guard",{"_index":327,"title":{},"body":{"modules/CommonModule.html":{}}}],["handleaddtocart",{"_index":35,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["handleaddtocart(event",{"_index":47,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["hash",{"_index":862,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["hash(credentials.password",{"_index":884,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["headers",{"_index":306,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{},"controllers/UserManagementController.html":{}}}],["headers.host",{"_index":309,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["headers['user",{"_index":311,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["hello",{"_index":186,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":870,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["here",{"_index":1040,"title":{},"body":{"index.html":{}}}],["hh:mm:ss.sss",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":308,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["howmanyroles",{"_index":220,"title":{},"body":{"guards/AuthGuard.html":{}}}],["http",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":689,"title":{},"body":{"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["httpcode(200",{"_index":697,"title":{},"body":{"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["httpcode(200)@post(':id",{"_index":679,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["httpexception",{"_index":291,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/JWTService.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthorizedFilter.html":{},"injectables/UserManagementService.html":{}}}],["httpexception(`error",{"_index":445,"title":{},"body":{"injectables/JWTService.html":{}}}],["https://nestjs.com",{"_index":1047,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":356,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"injectables/UserManagementService.html":{}}}],["httpstatus.bad_request",{"_index":372,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"injectables/UserManagementService.html":{}}}],["httpstatus.forbidden",{"_index":381,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["httpstatus.internal_server_error",{"_index":359,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["httpstatus.not_acceptable",{"_index":375,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["httpstatus.not_found",{"_index":369,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["httpstatus.ok",{"_index":746,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["httpstatus.unauthorized",{"_index":378,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["id",{"_index":541,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["identifier",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":502,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{}}}],["implements",{"_index":213,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CatchAllFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/UnauthorizedFilter.html":{}}}],["import",{"_index":54,"title":{},"body":{"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["imports",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{}}}],["inc",{"_index":111,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["incorrect",{"_index":901,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["increase",{"_index":106,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"miscellaneous/variables.html":{}}}],["inherited",{"_index":408,"title":{},"body":{"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["inject",{"_index":55,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["inject(usermanagementservice",{"_index":79,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["injectable",{"_index":28,"title":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"injectables/CRUDService.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{},"coverage.html":{}}}],["injectables",{"_index":30,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"injectables/CRUDService.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{},"overview.html":{}}}],["injectmodel",{"_index":62,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["injectmodel(product.name",{"_index":81,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{}}}],["injectmodel(user.name",{"_index":80,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["injectmodel(userwithpassword.name",{"_index":865,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["input",{"_index":250,"title":{},"body":{"injectables/CRUDService.html":{}}}],["installation",{"_index":1010,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1012,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":449,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":450,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":637,"title":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{}}}],["interfaces",{"_index":639,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":292,"title":{},"body":{"classes/CatchAllFilter.html":{}}}],["interval",{"_index":641,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"miscellaneous/functions.html":{}}}],["invalid_input",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid_request",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalidinputerror",{"_index":373,"title":{"classes/InvalidInputError.html":{}},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{}}}],["invalidrequesterror",{"_index":370,"title":{"classes/InvalidRequestError.html":{}},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{}}}],["ip",{"_index":759,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["is_public_key",{"_index":207,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":703,"title":{},"body":{"classes/ShoppingCartDto.html":{}}}],["isboolean",{"_index":588,"title":{},"body":{"classes/ProductDto.html":{}}}],["isemail",{"_index":344,"title":{},"body":{"classes/Credentials.html":{},"classes/UserDto.html":{}}}],["isemail({message",{"_index":337,"title":{},"body":{"classes/Credentials.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["isenum",{"_index":787,"title":{},"body":{"classes/UserDto.html":{}}}],["isenum(roles",{"_index":788,"title":{},"body":{"classes/UserDto.html":{}}}],["isglobal",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":715,"title":{},"body":{"classes/ShoppingCartItemDto.html":{}}}],["isnotempty",{"_index":345,"title":{},"body":{"classes/Credentials.html":{},"classes/ProductDto.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["isnotempty({message",{"_index":342,"title":{},"body":{"classes/Credentials.html":{},"classes/ProductDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["isnumber",{"_index":596,"title":{},"body":{"classes/ProductDto.html":{}}}],["isnumber()@isnotempty({message",{"_index":576,"title":{},"body":{"classes/ProductDto.html":{}}}],["isnumber({allowinfinity",{"_index":590,"title":{},"body":{"classes/ProductDto.html":{}}}],["isoptional",{"_index":574,"title":{},"body":{"classes/ProductDto.html":{},"classes/UserDto.html":{}}}],["isoptional()@isenum(roles",{"_index":784,"title":{},"body":{"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["isoptional()@isstring({message",{"_index":583,"title":{},"body":{"classes/ProductDto.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["ispositive",{"_index":597,"title":{},"body":{"classes/ProductDto.html":{}}}],["ispublic",{"_index":214,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":598,"title":{},"body":{"classes/ProductDto.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItemDto.html":{},"classes/UserDto.html":{}}}],["isstring({message",{"_index":586,"title":{},"body":{"classes/ProductDto.html":{}}}],["item",{"_index":114,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["item.dto",{"_index":70,"title":{},"body":{"injectables/AddToCartListener.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"injectables/ShoppingCartService.html":{},"classes/UserDto.html":{}}}],["item.dto.ts",{"_index":713,"title":{},"body":{"classes/ShoppingCartItemDto.html":{},"coverage.html":{}}}],["item.dto.ts:11",{"_index":718,"title":{},"body":{"classes/ShoppingCartItemDto.html":{}}}],["item.dto.ts:14",{"_index":716,"title":{},"body":{"classes/ShoppingCartItemDto.html":{}}}],["item.dto.ts:5",{"_index":717,"title":{},"body":{"classes/ShoppingCartItemDto.html":{}}}],["item.dto.ts:8",{"_index":714,"title":{},"body":{"classes/ShoppingCartItemDto.html":{}}}],["item.model",{"_index":667,"title":{},"body":{"classes/ShoppingCart.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{}}}],["item.model.ts",{"_index":706,"title":{},"body":{"classes/ShoppingCartItem.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item.model.ts:10",{"_index":707,"title":{},"body":{"classes/ShoppingCartItem.html":{}}}],["item.model.ts:13",{"_index":710,"title":{},"body":{"classes/ShoppingCartItem.html":{}}}],["item.model.ts:16",{"_index":708,"title":{},"body":{"classes/ShoppingCartItem.html":{}}}],["item.model.ts:7",{"_index":709,"title":{},"body":{"classes/ShoppingCartItem.html":{}}}],["itemexists",{"_index":100,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["items",{"_index":661,"title":{},"body":{"classes/ShoppingCart.html":{},"classes/ShoppingCartDto.html":{}}}],["join",{"_index":1037,"title":{},"body":{"index.html":{}}}],["json.parse(json.stringify(object",{"_index":476,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["json.stringify",{"_index":473,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["json.stringify(originalresponse",{"_index":474,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["jsonwebtoken",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":426,"title":{},"body":{"injectables/JWTService.html":{},"injectables/UserManagementService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":194,"title":{"injectables/JWTService.html":{}},"body":{"guards/AuthGuard.html":{},"modules/CommonModule.html":{},"injectables/JWTService.html":{},"modules/ProductModule.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1044,"title":{},"body":{"index.html":{}}}],["last",{"_index":782,"title":{},"body":{"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["lastname",{"_index":767,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["license",{"_index":1050,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1027,"title":{},"body":{"index.html":{}}}],["literal",{"_index":1065,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["log",{"_index":390,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["logexception",{"_index":396,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logexception(exception",{"_index":399,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["logexception(exceptionresponse",{"_index":762,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["logger",{"_index":56,"title":{},"body":{"injectables/AddToCartListener.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["logger.error(message",{"_index":406,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["logger.log",{"_index":468,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger.log('event",{"_index":82,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["logger_colors",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger_date_format",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger_label",{"_index":942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger_levels",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger_levels.debug",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger_levels.error",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger_levels.http",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger_levels.info",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger_levels.warn",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logginginterceptor",{"_index":328,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/CommonModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logic",{"_index":105,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["login",{"_index":795,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["login(@body",{"_index":835,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["login(credentials",{"_index":807,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["magenta",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":89,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["management.controller",{"_index":844,"title":{},"body":{"modules/UserManagementModule.html":{}}}],["management.controller.ts",{"_index":790,"title":{},"body":{"controllers/UserManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:27",{"_index":814,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["management.controller.ts:34",{"_index":811,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["management.controller.ts:40",{"_index":806,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["management.controller.ts:46",{"_index":803,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["management.controller.ts:53",{"_index":809,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["management.controller.ts:59",{"_index":819,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["management.controller.ts:69",{"_index":799,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["management.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["management.module.ts",{"_index":842,"title":{},"body":{"modules/UserManagementModule.html":{}}}],["management.service",{"_index":77,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/ProductModule.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{}}}],["management.service.ts",{"_index":845,"title":{},"body":{"injectables/UserManagementService.html":{},"coverage.html":{}}}],["management.service.ts:106",{"_index":855,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:113",{"_index":858,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:128",{"_index":850,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:139",{"_index":857,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:24",{"_index":849,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:33",{"_index":856,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:38",{"_index":854,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:49",{"_index":852,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:57",{"_index":853,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management.service.ts:80",{"_index":860,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["management/user",{"_index":76,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/AppModule.html":{},"modules/ProductModule.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"coverage.html":{}}}],["matching",{"_index":27,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxtries",{"_index":642,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":304,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/ProductDto.html":{},"interfaces/RetryOptions.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":458,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":33,"title":{},"body":{"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"classes/UnauthorizedFilter.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["middleware/logging.interceptor",{"_index":329,"title":{},"body":{"modules/CommonModule.html":{}}}],["miscellaneous",{"_index":982,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1026,"title":{},"body":{"index.html":{}}}],["mm",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1016,"title":{},"body":{"index.html":{}}}],["model",{"_index":42,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/CRUDService.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["model.count(filter",{"_index":269,"title":{},"body":{"injectables/CRUDService.html":{}}}],["model.create(input",{"_index":274,"title":{},"body":{"injectables/CRUDService.html":{}}}],["model.deletemany(filter",{"_index":276,"title":{},"body":{"injectables/CRUDService.html":{}}}],["model.find(filter",{"_index":272,"title":{},"body":{"injectables/CRUDService.html":{}}}],["model.findone(filter",{"_index":271,"title":{},"body":{"injectables/CRUDService.html":{}}}],["model.findoneanddelete(filter",{"_index":273,"title":{},"body":{"injectables/CRUDService.html":{}}}],["model.findoneandupdate(filter",{"_index":277,"title":{},"body":{"injectables/CRUDService.html":{}}}],["module",{"_index":130,"title":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{}}}],["modules",{"_index":132,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["mongodb://localhost:27017/nest",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["mongodb://root:pass1234@nest",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["mongodb:27017",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":64,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/CRUDService.html":{},"classes/Product.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UserManagementService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.mixed",{"_index":521,"title":{},"body":{"classes/Product.html":{}}}],["mongoose.schema.types.objectid",{"_index":573,"title":{},"body":{"classes/ProductDto.html":{}}}],["mongoosemodule",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{}}}],["mongoosemodule.forfeature",{"_index":611,"title":{},"body":{"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost:27017/nest",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1039,"title":{},"body":{"index.html":{}}}],["ms",{"_index":472,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["msg",{"_index":654,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["myśliwiec",{"_index":1045,"title":{},"body":{"index.html":{}}}],["name",{"_index":11,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPasswordDto.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":88,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["nest",{"_index":972,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nestframework",{"_index":1049,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":455,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"injectables/JWTService.html":{},"injectables/UserManagementService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":203,"title":{},"body":{"guards/AuthGuard.html":{},"modules/CommonModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":60,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/ShoppingCartService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":481,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":63,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/AppModule.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":99,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"interfaces/RetryOptions.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"injectables/UserManagementService.html":{},"coverage.html":{}}}],["newproduct",{"_index":631,"title":{},"body":{"injectables/ProductService.html":{}}}],["next",{"_index":451,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle().pipe",{"_index":466,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["node.js",{"_index":999,"title":{},"body":{"index.html":{}}}],["not_found",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfounderror",{"_index":367,"title":{"classes/NotFoundError.html":{}},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{}}}],["notfoundexception",{"_index":57,"title":{},"body":{"injectables/AddToCartListener.html":{},"classes/CatchAllFilter.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["now",{"_index":464,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/UserManagementService.html":{}}}],["npm",{"_index":1011,"title":{},"body":{"index.html":{}}}],["null",{"_index":270,"title":{},"body":{"injectables/CRUDService.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["number",{"_index":21,"title":{},"body":{"classes/AddToCartEvent.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"classes/ProductDto.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["number'})@isnotempty({message",{"_index":592,"title":{},"body":{"classes/ProductDto.html":{}}}],["numberofdocuments",{"_index":268,"title":{},"body":{"injectables/CRUDService.html":{}}}],["object",{"_index":305,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":441,"title":{},"body":{"injectables/JWTService.html":{}}}],["objectid",{"_index":775,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{}}}],["observable",{"_index":454,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["onevent",{"_index":59,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["onevent('add.to.cart",{"_index":49,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["onsale",{"_index":503,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{}}}],["open",{"_index":1028,"title":{},"body":{"index.html":{}}}],["optional",{"_index":46,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"injectables/ShoppingCartService.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":254,"title":{},"body":{"injectables/CRUDService.html":{}}}],["out",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"modules/UserManagementModule.html":{},"overview.html":{}}}],["overview",{"_index":1054,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":958,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":383,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"controllers/UserManagementController.html":{}}}],["param('id",{"_index":569,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["parameters",{"_index":45,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"miscellaneous/functions.html":{}}}],["partialproduct",{"_index":478,"title":{"classes/PartialProduct.html":{}},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{}}}],["partialshoppingcart",{"_index":492,"title":{"classes/PartialShoppingCart.html":{}},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"coverage.html":{}}}],["partialshoppingcartitem",{"_index":494,"title":{"classes/PartialShoppingCartItem.html":{}},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"coverage.html":{}}}],["partialtype",{"_index":480,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{}}}],["partialtype(productdto",{"_index":496,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{}}}],["partialtype(shoppingcartdto",{"_index":493,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{}}}],["partialtype(shoppingcartitemdto",{"_index":495,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{}}}],["partialtype(userdto",{"_index":491,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{}}}],["partialuser",{"_index":490,"title":{"classes/PartialUser.html":{}},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"coverage.html":{}}}],["passhash",{"_index":883,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["password",{"_index":336,"title":{},"body":{"classes/Credentials.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{}}}],["password.dto",{"_index":822,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["password.dto.ts",{"_index":921,"title":{},"body":{"classes/UserWithPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:6",{"_index":922,"title":{},"body":{"classes/UserWithPasswordDto.html":{}}}],["password.model",{"_index":609,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{}}}],["password.model.ts",{"_index":913,"title":{},"body":{"classes/UserWithPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.model.ts:10",{"_index":914,"title":{},"body":{"classes/UserWithPassword.html":{}}}],["passwordsmatched",{"_index":899,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["patch",{"_index":550,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["patch(':id",{"_index":568,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["path",{"_index":469,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["place",{"_index":86,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["please",{"_index":750,"title":{},"body":{"injectables/ShoppingCartService.html":{},"index.html":{}}}],["positive",{"_index":594,"title":{},"body":{"classes/ProductDto.html":{}}}],["post",{"_index":551,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["post(':id",{"_index":698,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["post('login",{"_index":834,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["postnewproduct",{"_index":531,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["postnewproduct(@body",{"_index":566,"title":{},"body":{"controllers/ProductController.html":{}}}],["postnewproduct(product",{"_index":542,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["predicate",{"_index":384,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["prefix",{"_index":526,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ShoppingCartController.html":{},"controllers/UserManagementController.html":{}}}],["present",{"_index":584,"title":{},"body":{"classes/ProductDto.html":{}}}],["present'})@isstring({message",{"_index":580,"title":{},"body":{"classes/ProductDto.html":{}}}],["price",{"_index":12,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"classes/Product.html":{},"classes/ProductDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{}}}],["private",{"_index":78,"title":{},"body":{"injectables/AddToCartListener.html":{},"guards/AuthGuard.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["privuser",{"_index":886,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["privuser._id",{"_index":890,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["process.env.node_env",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["product",{"_index":71,"title":{"classes/Product.html":{}},"body":{"injectables/AddToCartListener.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{}}}],["product.controller",{"_index":603,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":485,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{}}}],["product.name",{"_index":612,"title":{},"body":{"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/ShoppingCartModule.html":{}}}],["product.service",{"_index":558,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/product.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["productcontroller",{"_index":524,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productdto",{"_index":484,"title":{"classes/ProductDto.html":{}},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["productid",{"_index":13,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{}}}],["production",{"_index":1018,"title":{},"body":{"index.html":{}}}],["productmodel",{"_index":43,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{}}}],["productmodule",{"_index":138,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["products",{"_index":527,"title":{},"body":{"controllers/ProductController.html":{}}}],["productschema",{"_index":522,"title":{},"body":{"classes/Product.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productservice",{"_index":557,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/ShoppingCartModule.html":{},"coverage.html":{},"overview.html":{}}}],["profile",{"_index":432,"title":{},"body":{"injectables/JWTService.html":{}}}],["progressive",{"_index":998,"title":{},"body":{"index.html":{}}}],["project",{"_index":1029,"title":{},"body":{"index.html":{}}}],["projection",{"_index":261,"title":{},"body":{"injectables/CRUDService.html":{}}}],["projectiontype",{"_index":262,"title":{},"body":{"injectables/CRUDService.html":{}}}],["promise",{"_index":201,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"injectables/JWTService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"miscellaneous/functions.html":{}}}],["promise.all([userdb",{"_index":910,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["promise.resolve",{"_index":908,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["promise.resolve(this.crudservice.deletemany(this.usermodel",{"_index":906,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["promisify",{"_index":424,"title":{},"body":{"injectables/JWTService.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["promisify(jwt.sign",{"_index":429,"title":{},"body":{"injectables/JWTService.html":{},"miscellaneous/variables.html":{}}}],["promisify(jwt.verify",{"_index":431,"title":{},"body":{"injectables/JWTService.html":{},"miscellaneous/variables.html":{}}}],["promisify(settimeout",{"_index":658,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"miscellaneous/variables.html":{}}}],["prop",{"_index":504,"title":{},"body":{"classes/Product.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["prop(['shoppingcartitem",{"_index":664,"title":{},"body":{"classes/ShoppingCart.html":{}}}],["prop([shoppingcartitem",{"_index":668,"title":{},"body":{"classes/ShoppingCart.html":{}}}],["prop(roles",{"_index":771,"title":{},"body":{"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["prop({required",{"_index":508,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["prop({type",{"_index":515,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/AddToCartEvent.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"classes/ProductDto.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"properties.html":{}}}],["provide",{"_index":331,"title":{},"body":{"modules/CommonModule.html":{}}}],["providers",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{}}}],["ps5",{"_index":179,"title":{},"body":{"injectables/AppService.html":{}}}],["public",{"_index":239,"title":{},"body":{"injectables/CRUDService.html":{},"controllers/ProductController.html":{},"controllers/UserManagementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get",{"_index":536,"title":{},"body":{"controllers/ProductController.html":{}}}],["public()@get(':id",{"_index":539,"title":{},"body":{"controllers/ProductController.html":{}}}],["public()@post",{"_index":802,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["public()@post('login')@httpcode(200",{"_index":808,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["public()@role(roles.admin",{"_index":533,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["push",{"_index":117,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["pw",{"_index":896,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["quantity",{"_index":14,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{}}}],["queryoptions",{"_index":255,"title":{},"body":{"injectables/CRUDService.html":{}}}],["read",{"_index":1038,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":128,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{}}}],["record",{"_index":507,"title":{},"body":{"classes/Product.html":{},"classes/ProductDto.html":{}}}],["red",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{}}}],["reported",{"_index":764,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["repository",{"_index":1009,"title":{},"body":{"index.html":{}}}],["req",{"_index":222,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["req.header('token",{"_index":225,"title":{},"body":{"guards/AuthGuard.html":{}}}],["req.headers",{"_index":307,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["req.ip",{"_index":761,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["reqroles",{"_index":233,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request",{"_index":204,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CatchAllFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/UnauthorizedFilter.html":{}}}],["requesttimeoutexception",{"_index":643,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["require('jsonwebtoken",{"_index":427,"title":{},"body":{"injectables/JWTService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":520,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["requiredroles",{"_index":217,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requiredroles.length",{"_index":221,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requiredroles.some(x",{"_index":234,"title":{},"body":{"guards/AuthGuard.html":{}}}],["reset",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{},"overview.html":{}}}],["response",{"_index":293,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/UnauthorizedFilter.html":{}}}],["response.status(status).json",{"_index":313,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["rest",{"_index":888,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["rest._id",{"_index":889,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["restock",{"_index":752,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["results",{"_index":26,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":649,"title":{},"body":{"interfaces/RetryOptions.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["retry(task",{"_index":994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["retryoptions",{"_index":638,"title":{"interfaces/RetryOptions.html":{}},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["return",{"_index":108,"title":{},"body":{"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["returnallusers",{"_index":796,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["returncurrentuser",{"_index":797,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["returncurrentuser(@headers('token",{"_index":827,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["returncurrentuser(token",{"_index":812,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["returns",{"_index":52,"title":{},"body":{"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":232,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JWTService.html":{},"controllers/ProductController.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role(roles.admin",{"_index":564,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["role(roles.customer",{"_index":817,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["roles",{"_index":556,"title":{},"body":{"controllers/ProductController.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles.admin",{"_index":818,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["roles.customer",{"_index":825,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["roles.customer)@get",{"_index":810,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["roles.customer)@get(':id",{"_index":805,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["roles.customer)@get('me",{"_index":813,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["roles.super_admin",{"_index":565,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["roles.super_admin)@delete",{"_index":534,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["roles.super_admin)@patch(':id",{"_index":547,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["roles.super_admin)@post",{"_index":543,"title":{},"body":{"controllers/ProductController.html":{}}}],["roles_key",{"_index":208,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":648,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"index.html":{}}}],["rxjs",{"_index":457,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["salt",{"_index":881,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["scalable",{"_index":1003,"title":{},"body":{"index.html":{}}}],["schema",{"_index":518,"title":{},"body":{"classes/Product.html":{},"modules/ProductModule.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"modules/ShoppingCartModule.html":{},"classes/User.html":{},"modules/UserManagementModule.html":{},"classes/UserWithPassword.html":{}}}],["schemafactory",{"_index":519,"title":{},"body":{"classes/Product.html":{},"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["schemafactory.createforclass(product",{"_index":523,"title":{},"body":{"classes/Product.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shoppingcart",{"_index":670,"title":{},"body":{"classes/ShoppingCart.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shoppingcartitem",{"_index":712,"title":{},"body":{"classes/ShoppingCartItem.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":776,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(userwithpassword",{"_index":920,"title":{},"body":{"classes/UserWithPassword.html":{},"miscellaneous/variables.html":{}}}],["sent",{"_index":387,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["server",{"_index":1004,"title":{},"body":{"index.html":{}}}],["services/crud.service",{"_index":330,"title":{},"body":{"modules/CommonModule.html":{}}}],["services/jwt.service",{"_index":212,"title":{},"body":{"guards/AuthGuard.html":{},"modules/CommonModule.html":{}}}],["set",{"_index":635,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["setmetadata(is_public_key",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shopping",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"modules/ShoppingCartModule.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["shoppingcart",{"_index":118,"title":{"classes/ShoppingCart.html":{}},"body":{"injectables/AddToCartListener.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{}}}],["shoppingcart.$.quantity",{"_index":112,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["shoppingcart.length",{"_index":733,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["shoppingcart.name",{"_index":110,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/ShoppingCartModule.html":{}}}],["shoppingcartcontroller",{"_index":671,"title":{"controllers/ShoppingCartController.html":{}},"body":{"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"coverage.html":{}}}],["shoppingcartdto",{"_index":486,"title":{"classes/ShoppingCartDto.html":{}},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/ShoppingCartDto.html":{},"injectables/ShoppingCartService.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["shoppingcartitem",{"_index":663,"title":{"classes/ShoppingCartItem.html":{}},"body":{"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{},"coverage.html":{}}}],["shoppingcartitemdto",{"_index":67,"title":{"classes/ShoppingCartItemDto.html":{}},"body":{"injectables/AddToCartListener.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{}}}],["shoppingcartitemschema",{"_index":711,"title":{},"body":{"classes/ShoppingCartItem.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shoppingcartmodule",{"_index":139,"title":{"modules/ShoppingCartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ShoppingCartModule.html":{},"modules.html":{},"overview.html":{}}}],["shoppingcartschema",{"_index":669,"title":{},"body":{"classes/ShoppingCart.html":{},"modules/ShoppingCartModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shoppingcartservice",{"_index":690,"title":{"injectables/ShoppingCartService.html":{}},"body":{"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{},"overview.html":{}}}],["side",{"_index":1005,"title":{},"body":{"index.html":{}}}],["signtokenasync",{"_index":428,"title":{},"body":{"injectables/JWTService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sleep",{"_index":657,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sleep(interval",{"_index":653,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"modules/CommonModule.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"index.html":{}}}],["sponsors",{"_index":1032,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../error.utils.ts",{"_index":990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.service.ts",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logging.interceptor.ts",{"_index":992,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":991,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../product.model.ts",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../retry.ts",{"_index":993,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shopping",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":122,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":170,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":173,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:8",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/common.module.ts",{"_index":318,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/decorators/public.decorator",{"_index":552,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["src/common/decorators/public.decorator.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/role.decorator",{"_index":553,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserManagementController.html":{}}}],["src/common/decorators/role.decorator.ts",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/catch",{"_index":279,"title":{},"body":{"classes/CatchAllFilter.html":{},"coverage.html":{}}}],["src/common/filters/unauthorized.filter.ts",{"_index":756,"title":{},"body":{"classes/UnauthorizedFilter.html":{},"coverage.html":{}}}],["src/common/filters/unauthorized.filter.ts:17",{"_index":757,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["src/common/guards/auth.guard.ts",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/common/guards/auth.guard.ts:14",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/guards/auth.guard.ts:19",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/logger/constants.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/middleware/logging.interceptor.ts",{"_index":448,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/middleware/logging.interceptor.ts:14",{"_index":453,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/services/crud.service",{"_index":65,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{}}}],["src/common/services/crud.service.ts",{"_index":238,"title":{},"body":{"injectables/CRUDService.html":{},"coverage.html":{}}}],["src/common/services/crud.service.ts:12",{"_index":265,"title":{},"body":{"injectables/CRUDService.html":{}}}],["src/common/services/crud.service.ts:24",{"_index":263,"title":{},"body":{"injectables/CRUDService.html":{}}}],["src/common/services/crud.service.ts:34",{"_index":259,"title":{},"body":{"injectables/CRUDService.html":{}}}],["src/common/services/crud.service.ts:42",{"_index":248,"title":{},"body":{"injectables/CRUDService.html":{}}}],["src/common/services/crud.service.ts:46",{"_index":256,"title":{},"body":{"injectables/CRUDService.html":{}}}],["src/common/services/crud.service.ts:55",{"_index":267,"title":{},"body":{"injectables/CRUDService.html":{}}}],["src/common/services/jwt.service",{"_index":610,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{}}}],["src/common/services/jwt.service.ts",{"_index":413,"title":{},"body":{"injectables/JWTService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/services/jwt.service.ts:11",{"_index":418,"title":{},"body":{"injectables/JWTService.html":{}}}],["src/common/services/jwt.service.ts:14",{"_index":421,"title":{},"body":{"injectables/JWTService.html":{}}}],["src/common/services/jwt.service.ts:33",{"_index":423,"title":{},"body":{"injectables/JWTService.html":{}}}],["src/events",{"_index":66,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ShoppingCartService.html":{}}}],["src/events/add",{"_index":6,"title":{},"body":{"classes/AddToCartEvent.html":{},"coverage.html":{}}}],["src/listeners",{"_index":604,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/listeners/add",{"_index":31,"title":{},"body":{"injectables/AddToCartListener.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":948,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/dto/credentials.dto",{"_index":820,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["src/models/dto/credentials.dto.ts",{"_index":334,"title":{},"body":{"classes/Credentials.html":{},"coverage.html":{}}}],["src/models/dto/credentials.dto.ts:11",{"_index":343,"title":{},"body":{"classes/Credentials.html":{}}}],["src/models/dto/credentials.dto.ts:8",{"_index":341,"title":{},"body":{"classes/Credentials.html":{}}}],["src/models/dto/partialtypes",{"_index":554,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ShoppingCartController.html":{},"injectables/ShoppingCartService.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["src/models/dto/partialtypes.ts",{"_index":479,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"coverage.html":{}}}],["src/models/dto/product.dto",{"_index":555,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["src/models/dto/product.dto.ts",{"_index":572,"title":{},"body":{"classes/ProductDto.html":{},"coverage.html":{}}}],["src/models/dto/product.dto.ts:13",{"_index":575,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/product.dto.ts:17",{"_index":587,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/product.dto.ts:25",{"_index":595,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/product.dto.ts:29",{"_index":585,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/product.dto.ts:33",{"_index":581,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/product.dto.ts:37",{"_index":579,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/product.dto.ts:40",{"_index":589,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/product.dto.ts:43",{"_index":582,"title":{},"body":{"classes/ProductDto.html":{}}}],["src/models/dto/shopping",{"_index":68,"title":{},"body":{"injectables/AddToCartListener.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{}}}],["src/models/dto/user",{"_index":821,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{}}}],["src/models/dto/user.dto",{"_index":823,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["src/models/dto/user.dto.ts",{"_index":777,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/models/dto/user.dto.ts:14",{"_index":778,"title":{},"body":{"classes/UserDto.html":{}}}],["src/models/dto/user.dto.ts:20",{"_index":779,"title":{},"body":{"classes/UserDto.html":{}}}],["src/models/dto/user.dto.ts:22",{"_index":786,"title":{},"body":{"classes/UserDto.html":{}}}],["src/models/dto/user.dto.ts:26",{"_index":781,"title":{},"body":{"classes/UserDto.html":{}}}],["src/models/dto/user.dto.ts:30",{"_index":783,"title":{},"body":{"classes/UserDto.html":{}}}],["src/models/dto/user.dto.ts:34",{"_index":785,"title":{},"body":{"classes/UserDto.html":{}}}],["src/models/product.model",{"_index":72,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{}}}],["src/models/product.model.ts",{"_index":497,"title":{},"body":{"classes/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/product.model.ts:10",{"_index":517,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product.model.ts:13",{"_index":512,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product.model.ts:16",{"_index":506,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product.model.ts:19",{"_index":505,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product.model.ts:22",{"_index":516,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product.model.ts:25",{"_index":511,"title":{},"body":{"classes/Product.html":{}}}],["src/models/product.model.ts:7",{"_index":513,"title":{},"body":{"classes/Product.html":{}}}],["src/models/shopping",{"_index":659,"title":{},"body":{"classes/ShoppingCart.html":{},"classes/ShoppingCartItem.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/user",{"_index":608,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/user.model",{"_index":74,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/ProductModule.html":{},"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{}}}],["src/models/user.model.ts",{"_index":765,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/user.model.ts:12",{"_index":768,"title":{},"body":{"classes/User.html":{}}}],["src/models/user.model.ts:18",{"_index":774,"title":{},"body":{"classes/User.html":{}}}],["src/models/user.model.ts:23",{"_index":769,"title":{},"body":{"classes/User.html":{}}}],["src/models/user.model.ts:28",{"_index":770,"title":{},"body":{"classes/User.html":{}}}],["src/models/user.model.ts:31",{"_index":772,"title":{},"body":{"classes/User.html":{}}}],["src/product/product.controller.ts",{"_index":525,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts:23",{"_index":537,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:29",{"_index":540,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:36",{"_index":544,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:43",{"_index":548,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:53",{"_index":535,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.module.ts",{"_index":602,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/product/product.service",{"_index":723,"title":{},"body":{"modules/ShoppingCartModule.html":{}}}],["src/product/product.service.ts",{"_index":615,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/product/product.service.ts:13",{"_index":616,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:19",{"_index":618,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:24",{"_index":619,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:34",{"_index":620,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:53",{"_index":621,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:71",{"_index":617,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/shopping",{"_index":672,"title":{},"body":{"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"coverage.html":{}}}],["src/user",{"_index":75,"title":{},"body":{"injectables/AddToCartListener.html":{},"modules/ProductModule.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"coverage.html":{}}}],["src/utils/constants",{"_index":209,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JWTService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["src/utils/constants.ts",{"_index":954,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/utils/error.utils",{"_index":211,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ProductService.html":{},"classes/UnauthorizedFilter.html":{},"injectables/UserManagementService.html":{}}}],["src/utils/error.utils.ts",{"_index":348,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/error.utils.ts:22",{"_index":477,"title":{},"body":{"classes/NotFoundError.html":{}}}],["src/utils/error.utils.ts:28",{"_index":412,"title":{},"body":{"classes/InvalidRequestError.html":{}}}],["src/utils/error.utils.ts:34",{"_index":407,"title":{},"body":{"classes/InvalidInputError.html":{}}}],["src/utils/error.utils.ts:40",{"_index":755,"title":{},"body":{"classes/UnauthorizedError.html":{}}}],["src/utils/error.utils.ts:46",{"_index":754,"title":{},"body":{"classes/UnauthenticatedError.html":{}}}],["src/utils/error.utils.ts:5",{"_index":355,"title":{},"body":{"classes/DomainError.html":{}}}],["src/utils/error.utils.ts:6",{"_index":354,"title":{},"body":{"classes/DomainError.html":{}}}],["src/utils/error.utils.ts:7",{"_index":353,"title":{},"body":{"classes/DomainError.html":{}}}],["src/utils/retry",{"_index":732,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["src/utils/retry.ts",{"_index":640,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/retry.ts:11",{"_index":753,"title":{},"body":{"interfaces/Task.html":{}}}],["stack",{"_index":404,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["start",{"_index":1014,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1017,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1019,"title":{},"body":{"index.html":{}}}],["started",{"_index":997,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1008,"title":{},"body":{"index.html":{}}}],["statements",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":298,"title":{},"body":{"classes/CatchAllFilter.html":{},"injectables/ShoppingCartService.html":{},"classes/UnauthorizedFilter.html":{}}}],["statuscode",{"_index":351,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["stay",{"_index":1041,"title":{},"body":{"index.html":{}}}],["stock",{"_index":578,"title":{},"body":{"classes/ProductDto.html":{},"injectables/ShoppingCartService.html":{}}}],["string",{"_index":17,"title":{},"body":{"classes/AddToCartEvent.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CatchAllFilter.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"miscellaneous/variables.html":{}}}],["string'})@isnotempty({message",{"_index":339,"title":{},"body":{"classes/Credentials.html":{},"classes/ProductDto.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["super(message",{"_index":360,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["super_admin",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["superadmin",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["support",{"_index":1033,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":90,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["svg",{"_index":1052,"title":{},"body":{"modules.html":{}}}],["t",{"_index":249,"title":{},"body":{"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthorizedFilter.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":85,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["tap",{"_index":456,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tap(originalresponse",{"_index":467,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["task",{"_index":647,"title":{"interfaces/Task.html":{}},"body":{"interfaces/RetryOptions.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["task.description",{"_index":656,"title":{},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["taskstatus",{"_index":645,"title":{"interfaces/TaskStatus.html":{}},"body":{"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"coverage.html":{}}}],["test",{"_index":1022,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1025,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1024,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1021,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1031,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["this.code",{"_index":363,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["this.configservice.get('secret",{"_index":434,"title":{},"body":{"injectables/JWTService.html":{}}}],["this.constructor",{"_index":366,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["this.constructor.name",{"_index":362,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["this.converttouserprofile(user",{"_index":903,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["this.crudservice.create",{"_index":632,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserManagementService.html":{}}}],["this.crudservice.create(rest",{"_index":891,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["this.crudservice.deletemany(this.productmodel",{"_index":636,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.crudservice.deletemany(this.userwithpasswordmodel",{"_index":909,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["this.crudservice.findmany(this.productmodel",{"_index":623,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.crudservice.findmany(this.usermodel",{"_index":867,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["this.crudservice.findone",{"_index":95,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["this.crudservice.updateone",{"_index":109,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["this.eventemitter.emit('add.to.cart",{"_index":185,"title":{},"body":{"injectables/AppService.html":{},"injectables/ShoppingCartService.html":{}}}],["this.jwtservice.generatetoken(userprofile",{"_index":904,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["this.jwtservice.verifytoken(gettokenheader",{"_index":231,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.jwtservice.verifytoken(token",{"_index":912,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["this.name",{"_index":361,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["this.productmodel",{"_index":625,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ShoppingCartService.html":{}}}],["this.productservice.deleteallproducts",{"_index":571,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getallproducts",{"_index":560,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getproductbyid(id",{"_index":563,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.postnewproduct(product",{"_index":567,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.updateproductbyid(id",{"_index":570,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.reflector.get(is_public_key",{"_index":215,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":218,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.shoppingcartservice.additemtocart(id",{"_index":699,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["this.shoppingcartservice.clearusercart(id",{"_index":701,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["this.shoppingcartservice.getshoppingcart(id",{"_index":696,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["this.shoppingcartservice.getshoppingcartcount(id",{"_index":694,"title":{},"body":{"controllers/ShoppingCartController.html":{}}}],["this.statuscode",{"_index":364,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["this.usermanagementservice.clearuserdb",{"_index":838,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["this.usermanagementservice.createnewuser(credentials",{"_index":833,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["this.usermanagementservice.getuserbyid(id",{"_index":831,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["this.usermanagementservice.login(credentials",{"_index":836,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["this.usermanagementservice.returnallusers",{"_index":829,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["this.usermanagementservice.returncurrentuser(token",{"_index":828,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["this.usermanagementservice.updateuserbyid(id",{"_index":837,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["this.usermodel",{"_index":97,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["this.userwithpasswordmodel",{"_index":887,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["this.verifycredentials(credentials",{"_index":902,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["throw",{"_index":98,"title":{},"body":{"injectables/AddToCartListener.html":{},"guards/AuthGuard.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"classes/NotFoundError.html":{},"interfaces/RetryOptions.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"injectables/UserManagementService.html":{}}}],["throwerror",{"_index":955,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["throwerror(message",{"_index":397,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["throws",{"_index":393,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["timestamp",{"_index":314,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["token",{"_index":228,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/JWTService.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["touch",{"_index":1042,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/Product.html":{},"injectables/ProductService.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{},"miscellaneous/variables.html":{}}}],["true/truthy",{"_index":386,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/functions.html":{}}}],["try",{"_index":433,"title":{},"body":{"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{}}}],["twitter",{"_index":1048,"title":{},"body":{"index.html":{}}}],["type",{"_index":15,"title":{},"body":{"classes/AddToCartEvent.html":{},"injectables/AddToCartListener.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/CRUDService.html":{},"classes/CatchAllFilter.html":{},"classes/Credentials.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"injectables/JWTService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/ProductDto.html":{},"injectables/ProductService.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"controllers/ShoppingCartController.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItem.html":{},"classes/ShoppingCartItemDto.html":{},"injectables/ShoppingCartService.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1063,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":303,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["types",{"_index":482,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"dependencies.html":{}}}],["typescript",{"_index":1007,"title":{},"body":{"index.html":{}}}],["unauthenticated",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthenticatederror",{"_index":379,"title":{"classes/UnauthenticatedError.html":{}},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{}}}],["unauthorized",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizederror",{"_index":376,"title":{"classes/UnauthorizedError.html":{}},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"coverage.html":{}}}],["unauthorizedexception",{"_index":202,"title":{},"body":{"guards/AuthGuard.html":{},"classes/UnauthorizedFilter.html":{}}}],["unauthorizedexception('no",{"_index":226,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unauthorizedfilter",{"_index":325,"title":{"classes/UnauthorizedFilter.html":{}},"body":{"modules/CommonModule.html":{},"classes/UnauthorizedFilter.html":{},"coverage.html":{}}}],["undefined",{"_index":510,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{},"classes/UserWithPassword.html":{}}}],["unexpected",{"_index":400,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{}}}],["unit",{"_index":1020,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":53,"title":{},"body":{"injectables/AddToCartListener.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1062,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":749,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["updatedproduct",{"_index":546,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["updateduser",{"_index":816,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["updateone",{"_index":245,"title":{},"body":{"injectables/CRUDService.html":{}}}],["updateone(filter",{"_index":266,"title":{},"body":{"injectables/CRUDService.html":{}}}],["updateproduct",{"_index":634,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductbyid",{"_index":532,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["updateproductbyid(id",{"_index":545,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["updatequery",{"_index":247,"title":{},"body":{"injectables/CRUDService.html":{}}}],["updateuserbyid",{"_index":798,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["updateuserbyid(id",{"_index":815,"title":{},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{}}}],["uri",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"classes/ProductDto.html":{}}}],["url",{"_index":459,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["useclass",{"_index":332,"title":{},"body":{"modules/CommonModule.html":{}}}],["useme",{"_index":879,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["useme.password",{"_index":885,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["user",{"_index":73,"title":{"classes/User.html":{}},"body":{"injectables/AddToCartListener.html":{},"modules/AppModule.html":{},"injectables/JWTService.html":{},"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"modules/ProductModule.html":{},"controllers/ShoppingCartController.html":{},"modules/ShoppingCartModule.html":{},"injectables/ShoppingCartService.html":{},"classes/User.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"coverage.html":{}}}],["user._id",{"_index":873,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["user.dto",{"_index":489,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/UserWithPasswordDto.html":{}}}],["user.email",{"_index":874,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["user.model",{"_index":483,"title":{},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/UserWithPassword.html":{}}}],["user.name",{"_index":613,"title":{},"body":{"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{}}}],["user.role",{"_index":875,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["user.save",{"_index":735,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["user.shoppingcart",{"_index":734,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["user:12",{"_index":915,"title":{},"body":{"classes/UserWithPassword.html":{}}}],["user:18",{"_index":919,"title":{},"body":{"classes/UserWithPassword.html":{}}}],["user:23",{"_index":916,"title":{},"body":{"classes/UserWithPassword.html":{}}}],["user:28",{"_index":917,"title":{},"body":{"classes/UserWithPassword.html":{}}}],["user:31",{"_index":918,"title":{},"body":{"classes/UserWithPassword.html":{}}}],["useragent",{"_index":310,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/UnauthorizedFilter.html":{}}}],["userdb",{"_index":905,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["userdto",{"_index":488,"title":{"classes/UserDto.html":{}},"body":{"classes/PartialProduct.html":{},"classes/PartialShoppingCart.html":{},"classes/PartialShoppingCartItem.html":{},"classes/PartialUser.html":{},"classes/UserDto.html":{},"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{}}}],["userdto:14",{"_index":923,"title":{},"body":{"classes/UserWithPasswordDto.html":{}}}],["userdto:20",{"_index":924,"title":{},"body":{"classes/UserWithPasswordDto.html":{}}}],["userdto:22",{"_index":928,"title":{},"body":{"classes/UserWithPasswordDto.html":{}}}],["userdto:26",{"_index":925,"title":{},"body":{"classes/UserWithPasswordDto.html":{}}}],["userdto:30",{"_index":926,"title":{},"body":{"classes/UserWithPasswordDto.html":{}}}],["userdto:34",{"_index":927,"title":{},"body":{"classes/UserWithPasswordDto.html":{}}}],["userexists",{"_index":868,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["userid",{"_index":662,"title":{},"body":{"classes/ShoppingCart.html":{},"classes/ShoppingCartDto.html":{}}}],["usermanagementcontroller",{"_index":789,"title":{"controllers/UserManagementController.html":{}},"body":{"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"coverage.html":{}}}],["usermanagementmodule",{"_index":140,"title":{"modules/UserManagementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserManagementModule.html":{},"modules.html":{},"overview.html":{}}}],["usermanagementservice",{"_index":40,"title":{"injectables/UserManagementService.html":{}},"body":{"injectables/AddToCartListener.html":{},"modules/ProductModule.html":{},"controllers/UserManagementController.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"coverage.html":{},"overview.html":{}}}],["usermodel",{"_index":41,"title":{},"body":{"injectables/AddToCartListener.html":{},"injectables/ShoppingCartService.html":{},"injectables/UserManagementService.html":{}}}],["userprofile",{"_index":420,"title":{},"body":{"injectables/JWTService.html":{},"injectables/UserManagementService.html":{},"miscellaneous/typealiases.html":{}}}],["users",{"_index":791,"title":{},"body":{"controllers/UserManagementController.html":{}}}],["userschema",{"_index":605,"title":{},"body":{"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"classes/User.html":{},"modules/UserManagementModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":39,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["userwithpassword",{"_index":606,"title":{"classes/UserWithPassword.html":{}},"body":{"modules/ProductModule.html":{},"modules/UserManagementModule.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPassword.html":{},"coverage.html":{}}}],["userwithpassword.name",{"_index":614,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserManagementModule.html":{}}}],["userwithpassworddto",{"_index":801,"title":{"classes/UserWithPasswordDto.html":{}},"body":{"controllers/UserManagementController.html":{},"injectables/UserManagementService.html":{},"classes/UserWithPasswordDto.html":{},"coverage.html":{}}}],["userwithpasswordmodel",{"_index":848,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["userwithpasswordschema",{"_index":607,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserManagementModule.html":{},"classes/UserWithPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userwpassworddb",{"_index":907,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["userwpassworddb]).then(x",{"_index":911,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["util",{"_index":425,"title":{},"body":{"injectables/JWTService.html":{},"interfaces/RetryOptions.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{}}}],["valid",{"_index":338,"title":{},"body":{"classes/Credentials.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{}}}],["validate",{"_index":898,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["validator",{"_index":346,"title":{},"body":{"classes/Credentials.html":{},"classes/ProductDto.html":{},"classes/ShoppingCartDto.html":{},"classes/ShoppingCartItemDto.html":{},"classes/UserDto.html":{},"classes/UserWithPasswordDto.html":{},"dependencies.html":{}}}],["value",{"_index":392,"title":{},"body":{"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/Product.html":{},"classes/ProductDto.html":{},"interfaces/RetryOptions.html":{},"classes/ShoppingCart.html":{},"interfaces/Task.html":{},"interfaces/TaskStatus.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1066,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycredentials",{"_index":847,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["verifycredentials(credentials",{"_index":859,"title":{},"body":{"injectables/UserManagementService.html":{}}}],["verifying",{"_index":446,"title":{},"body":{"injectables/JWTService.html":{}}}],["verifytoken",{"_index":415,"title":{},"body":{"injectables/JWTService.html":{}}}],["verifytoken(token",{"_index":422,"title":{},"body":{"injectables/JWTService.html":{}}}],["verifytokenasync",{"_index":430,"title":{},"body":{"injectables/JWTService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1060,"title":{},"body":{"properties.html":{}}}],["void",{"_index":288,"title":{},"body":{"classes/CatchAllFilter.html":{},"classes/DomainError.html":{},"classes/InvalidInputError.html":{},"classes/InvalidRequestError.html":{},"classes/NotFoundError.html":{},"classes/UnauthenticatedError.html":{},"classes/UnauthorizedError.html":{},"classes/UnauthorizedFilter.html":{},"miscellaneous/functions.html":{}}}],["wait",{"_index":751,"title":{},"body":{"injectables/ShoppingCartService.html":{}}}],["warn",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warning",{"_index":763,"title":{},"body":{"classes/UnauthorizedFilter.html":{}}}],["watch",{"_index":1015,"title":{},"body":{"index.html":{}}}],["website",{"_index":1046,"title":{},"body":{"index.html":{}}}],["winston",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["world",{"_index":187,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":235,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserManagementService.html":{}}}],["x.name",{"_index":102,"title":{},"body":{"injectables/AddToCartListener.html":{}}}],["yellow",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":257,"title":{},"body":{"injectables/CRUDService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1036,"title":{},"body":{"index.html":{}}}],["yy",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ProductModule.html":{},"modules/ShoppingCartModule.html":{},"modules/UserManagementModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddToCartEvent.html":{"url":"classes/AddToCartEvent.html","title":"class - AddToCartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddToCartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/add-to-cart.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                belongsTo\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                            \n                                productId\n                            \n                            \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        belongsTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/events/add-to-cart.event.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/events/add-to-cart.event.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/events/add-to-cart.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/events/add-to-cart.event.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/events/add-to-cart.event.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddToCartEvent {\n  belongsTo: string;\n  productId: string;\n  name: string;\n  quantity: number;\n  price: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddToCartListener.html":{"url":"injectables/AddToCartListener.html","title":"injectable - AddToCartListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddToCartListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/listeners/add-to-cart.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleAddToCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crudService: CRUDService, userService: UserManagementService, userModel: Model, productModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/listeners/add-to-cart.listener.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crudService\n                                                  \n                                                        \n                                                                        CRUDService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserManagementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleAddToCart\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAddToCart(event: AddToCartEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('add.to.cart')\n                \n            \n\n            \n                \n                    Defined in src/listeners/add-to-cart.listener.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                AddToCartEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CRUDService } from 'src/common/services/crud.service';\nimport { AddToCartEvent } from 'src/events';\nimport { ShoppingCartItemDto } from 'src/models/dto/shopping-cart-item.dto';\nimport { Product } from 'src/models/product.model';\nimport { User } from 'src/models/user.model';\nimport { UserManagementService } from 'src/user-management/user-management.service';\n\n@Injectable()\nexport class AddToCartListener {\n  constructor(\n    private crudService: CRUDService,\n    @Inject(UserManagementService) private userService: UserManagementService,\n    @InjectModel(User.name) private userModel: Model,\n    @InjectModel(Product.name) private productModel: Model,\n  ) {}\n  @OnEvent('add.to.cart')\n  async handleAddToCart(event: AddToCartEvent) {\n    Logger.log('EVENT EMITTED');\n    // Product check takes place before event,\n    // So just need to make sure user exists\n    const { belongsTo, productId } = event;\n    const findUser = await this.crudService.findOne(\n      { _id: belongsTo },\n      this.userModel,\n    );\n    if (!findUser) {\n      throw new NotFoundException();\n    }\n    const itemExists = findUser.shoppingCart.find(x => x.name === event.name);\n    if (itemExists) {\n      // ADD LOGIC TO INCREASE QUANTITY\n      console.log('EXISTS');\n      return await this.crudService.updateOne(\n        { _id: belongsTo, 'shoppingCart.name': event.name },\n        { $inc: { 'shoppingCart.$.quantity': 1 } },\n        this.userModel,\n      );\n    }\n    const item: ShoppingCartItemDto = {\n      productId: productId,\n      name: event.name,\n      quantity: event.quantity,\n      price: event.price,\n    };\n    return await this.crudService.updateOne(\n      { _id: belongsTo },\n      { $push: { shoppingCart: item } },\n      this.userModel,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nShoppingCartModule\n\nShoppingCartModule\n\nAppModule -->\n\nShoppingCartModule->AppModule\n\n\n\n\n\nUserManagementModule\n\nUserManagementModule\n\nAppModule -->\n\nUserManagementModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            ShoppingCartModule\n                        \n                        \n                            UserManagementModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CommonModule } from './common/common.module';\nimport { UserManagementModule } from './user-management/user-management.module';\nimport { ProductModule } from './product/product.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ShoppingCartModule } from './shopping-cart/shopping-cart.module';\n\n// let uri: string =\n//   process.env.NODE_ENV === 'development'\n//     ? 'mongodb://localhost:27017/nest-mongodb'\n//     : 'mongodb://root:pass1234@nest-mongodb:27017';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    EventEmitterModule.forRoot(),\n    MongooseModule.forRoot('mongodb://localhost:27017/nest-mongodb'),\n    CommonModule,\n    UserManagementModule,\n    ProductModule,\n    ShoppingCartModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { AddToCartEvent } from './events';\n\n@Injectable()\nexport class AppService {\n  constructor(private eventEmitter: EventEmitter2) {}\n  getHello(): string {\n    const addToCartTest = new AddToCartEvent();\n    addToCartTest.name = 'PS5';\n    addToCartTest.price = 499;\n    addToCartTest.productId = 'asdfsdfadfasdfa';\n    addToCartTest.quantity = 1;\n    this.eventEmitter.emit('add.to.cart', addToCartTest);\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JWTService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JWTService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/auth.guard.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { ERROR_CODES, IS_PUBLIC_KEY, ROLES_KEY } from 'src/utils/constants';\nimport { assert } from 'src/utils/error.utils';\nimport { JWTService } from '../services/jwt.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JWTService,\n    private readonly reflector: Reflector,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.get(IS_PUBLIC_KEY, context.getHandler());\n    if (isPublic) return true;\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    if (!requiredRoles) return true;\n    const howManyRoles = requiredRoles.length;\n    const req = context.switchToHttp().getRequest();\n    const getTokenHeader = req.header('token');\n    if (!getTokenHeader) {\n      throw new UnauthorizedException('NO AUTH TOKEN DETECTED');\n    }\n\n    const decodeToken = await this.jwtService.verifyToken(getTokenHeader);\n    const { role } = decodeToken;\n    if (howManyRoles > 1) {\n      const reqRoles = requiredRoles.some(x => `${x}` === `${role}`);\n      return reqRoles;\n    }\n    console.log(requiredRoles.length);\n    console.log(`${role} === ${requiredRoles}`);\n    return `${role}` === `${requiredRoles}`;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CRUDService.html":{"url":"injectables/CRUDService.html","title":"injectable - CRUDService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CRUDService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/crud.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMany\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                findMany\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(input: UpdateQuery, model: Model)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/crud.service.ts:42\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            Model\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(model: Model, filter?: FilterQuery, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/crud.service.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            Model\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(filter: FilterQuery, model: Model, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/crud.service.ts:34\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            Model\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMany(model: Model, filter?: FilterQuery, projection?: ProjectionType, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/crud.service.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            Model\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter: FilterQuery, model: Model, projection?: ProjectionType, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/crud.service.ts:12\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            Model\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(filter: FilterQuery, input: UpdateQuery, model: Model, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/crud.service.ts:55\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            UpdateQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                            Model\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  FilterQuery,\n  Model,\n  ProjectionType,\n  QueryOptions,\n  UpdateQuery,\n} from 'mongoose';\n\n@Injectable()\nexport class CRUDService {\n  public async findOne(\n    filter: FilterQuery,\n    model: Model,\n    projection?: ProjectionType,\n    options?: QueryOptions,\n  ): Promise {\n    const numberOfDocuments = await model.count(filter);\n    if (numberOfDocuments > 1) return null;\n\n    return model.findOne(filter, projection, options);\n  }\n\n  public async findMany(\n    model: Model,\n\n    filter?: FilterQuery,\n    projection?: ProjectionType,\n    options?: QueryOptions,\n  ): Promise {\n    return model.find(filter, projection, options);\n  }\n\n  public async deleteOne(\n    filter: FilterQuery,\n    model: Model,\n    options?: QueryOptions,\n  ): Promise {\n    return model.findOneAndDelete(filter, options);\n  }\n\n  public async create(input: UpdateQuery, model: Model): Promise {\n    return model.create(input);\n  }\n\n  public async deleteMany(\n    model: Model,\n    filter?: FilterQuery,\n    options?: QueryOptions,\n  ): Promise {\n    const deleteResult = await model.deleteMany(filter, options);\n    return deleteResult as any;\n  }\n\n  public async updateOne(\n    filter: FilterQuery,\n    input: UpdateQuery,\n    model: Model,\n    options?: QueryOptions,\n  ): Promise {\n    return model.findOneAndUpdate(filter, input, {\n      new: true,\n      ...options,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CatchAllFilter.html":{"url":"classes/CatchAllFilter.html","title":"class - CatchAllFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CatchAllFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/catch-all.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, argsHost: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/catch-all.filter.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argsHost\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  BadGatewayException,\n  BadRequestException,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(\n  BadRequestException,\n  BadGatewayException,\n  NotFoundException,\n  InternalServerErrorException,\n)\nexport class CatchAllFilter\n  implements ExceptionFilter\n{\n  catch(exception: T, argsHost: ArgumentsHost) {\n    const ctx = argsHost.switchToHttp();\n    const response = ctx.getResponse();\n    const req = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n    const error =\n      typeof response === 'string'\n        ? { message: exceptionResponse }\n        : (exceptionResponse as object);\n    const headers = req.headers;\n    const host = headers.host;\n    const userAgent = headers['user-agent'];\n    response.status(status).json({\n      ...error,\n      timestamp: new Date().toISOString(),\n      headers: {\n        host: host,\n        userAgent: userAgent,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_providers\n\n\n\n\nCRUDService\n\nCRUDService\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nCRUDService->CommonModule\n\n\n\n\n\nJWTService\n\nJWTService\n\nCommonModule -->\n\nJWTService->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CRUDService\n                        \n                        \n                            JWTService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { APP_FILTER, APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { CatchAllFilter } from './filters/catch-all.filter';\nimport { UnauthorizedFilter } from './filters/unauthorized.filter';\nimport { AuthGuard } from './guards/auth.guard';\nimport { LoggingInterceptor } from './middleware/logging.interceptor';\nimport { CRUDService } from './services/crud.service';\nimport { JWTService } from './services/jwt.service';\n\n@Global()\n@Module({\n  providers: [\n    { provide: APP_GUARD, useClass: AuthGuard },\n    { provide: APP_FILTER, useClass: UnauthorizedFilter },\n    { provide: APP_FILTER, useClass: CatchAllFilter },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n    CRUDService,\n    JWTService,\n  ],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Credentials.html":{"url":"classes/Credentials.html","title":"class - Credentials","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Credentials\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be a valid email string'})@IsNotEmpty({message: 'Email cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/credentials.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password cannot be empty!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/credentials.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class Credentials {\n  @IsEmail({\n    message: 'Must be a valid email string',\n  })\n  @IsNotEmpty({ message: 'Email cannot be empty' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Password cannot be empty!' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DomainError.html":{"url":"classes/DomainError.html","title":"class - DomainError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DomainError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/error.utils.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, code: string, statusCode: number)\n                    \n                \n                        \n                            \n                                Defined in src/utils/error.utils.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/error.utils.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/error.utils.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/error.utils.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, Logger } from '@nestjs/common';\nimport { ERROR_CODES } from './constants';\n\nexport class DomainError extends Error {\n  name: string;\n  code: string;\n  statusCode: number;\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.UNKNOWN,\n    statusCode: number = HttpStatus.INTERNAL_SERVER_ERROR,\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = statusCode;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class NotFoundError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.NOT_FOUND, HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class InvalidRequestError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_REQUEST, HttpStatus.BAD_REQUEST);\n  }\n}\n\nexport class InvalidInputError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_INPUT, HttpStatus.NOT_ACCEPTABLE);\n  }\n}\n\nexport class UnauthorizedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHORIZED, HttpStatus.UNAUTHORIZED);\n  }\n}\n\nexport class UnauthenticatedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHENTICATED, HttpStatus.FORBIDDEN);\n  }\n}\n\n/* FUNCS */\n\n/**\n * @param predicate Predicate asserted to be true/truthy\n * @param message Error message sent if the assertion is false/falsy\n * @param code Error code sent if the assertion is false/falsy\n * @param log? Boolean value to log or not\n * @returns void OR throws DomainError\n */\nexport function assert(predicate, message, code, log?): void {\n  if (predicate) return;\n  if (log) {\n    logException({ message: message });\n    throwError(message, code);\n  }\n}\n\nexport function throwError(message, code): void {\n  throw new DomainError(message, code);\n}\n\nexport function logException(exception): void {\n  let message = 'Unexpected Error';\n  if (exception?.message) {\n    message = exception.message;\n  }\n  if (exception?.stack) {\n    message = `${message}: Stack: ${exception.stack}`;\n  }\n  Logger.error(message);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidInputError.html":{"url":"classes/InvalidInputError.html","title":"class - InvalidInputError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidInputError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/error.utils.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DomainError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message)\n                    \n                \n                        \n                            \n                                Defined in src/utils/error.utils.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, Logger } from '@nestjs/common';\nimport { ERROR_CODES } from './constants';\n\nexport class DomainError extends Error {\n  name: string;\n  code: string;\n  statusCode: number;\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.UNKNOWN,\n    statusCode: number = HttpStatus.INTERNAL_SERVER_ERROR,\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = statusCode;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class NotFoundError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.NOT_FOUND, HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class InvalidRequestError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_REQUEST, HttpStatus.BAD_REQUEST);\n  }\n}\n\nexport class InvalidInputError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_INPUT, HttpStatus.NOT_ACCEPTABLE);\n  }\n}\n\nexport class UnauthorizedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHORIZED, HttpStatus.UNAUTHORIZED);\n  }\n}\n\nexport class UnauthenticatedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHENTICATED, HttpStatus.FORBIDDEN);\n  }\n}\n\n/* FUNCS */\n\n/**\n * @param predicate Predicate asserted to be true/truthy\n * @param message Error message sent if the assertion is false/falsy\n * @param code Error code sent if the assertion is false/falsy\n * @param log? Boolean value to log or not\n * @returns void OR throws DomainError\n */\nexport function assert(predicate, message, code, log?): void {\n  if (predicate) return;\n  if (log) {\n    logException({ message: message });\n    throwError(message, code);\n  }\n}\n\nexport function throwError(message, code): void {\n  throw new DomainError(message, code);\n}\n\nexport function logException(exception): void {\n  let message = 'Unexpected Error';\n  if (exception?.message) {\n    message = exception.message;\n  }\n  if (exception?.stack) {\n    message = `${message}: Stack: ${exception.stack}`;\n  }\n  Logger.error(message);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidRequestError.html":{"url":"classes/InvalidRequestError.html","title":"class - InvalidRequestError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidRequestError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/error.utils.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DomainError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message)\n                    \n                \n                        \n                            \n                                Defined in src/utils/error.utils.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, Logger } from '@nestjs/common';\nimport { ERROR_CODES } from './constants';\n\nexport class DomainError extends Error {\n  name: string;\n  code: string;\n  statusCode: number;\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.UNKNOWN,\n    statusCode: number = HttpStatus.INTERNAL_SERVER_ERROR,\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = statusCode;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class NotFoundError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.NOT_FOUND, HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class InvalidRequestError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_REQUEST, HttpStatus.BAD_REQUEST);\n  }\n}\n\nexport class InvalidInputError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_INPUT, HttpStatus.NOT_ACCEPTABLE);\n  }\n}\n\nexport class UnauthorizedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHORIZED, HttpStatus.UNAUTHORIZED);\n  }\n}\n\nexport class UnauthenticatedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHENTICATED, HttpStatus.FORBIDDEN);\n  }\n}\n\n/* FUNCS */\n\n/**\n * @param predicate Predicate asserted to be true/truthy\n * @param message Error message sent if the assertion is false/falsy\n * @param code Error code sent if the assertion is false/falsy\n * @param log? Boolean value to log or not\n * @returns void OR throws DomainError\n */\nexport function assert(predicate, message, code, log?): void {\n  if (predicate) return;\n  if (log) {\n    logException({ message: message });\n    throwError(message, code);\n  }\n}\n\nexport function throwError(message, code): void {\n  throw new DomainError(message, code);\n}\n\nexport function logException(exception): void {\n  let message = 'Unexpected Error';\n  if (exception?.message) {\n    message = exception.message;\n  }\n  if (exception?.stack) {\n    message = `${message}: Stack: ${exception.stack}`;\n  }\n  Logger.error(message);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTService.html":{"url":"injectables/JWTService.html","title":"injectable - JWTService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JWTService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/services/jwt.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(userProfile: UserProfile)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/jwt.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userProfile\n                                    \n                                                UserProfile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/jwt.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ERROR_CODES, UserProfile } from 'src/utils/constants';\nimport { assert } from 'src/utils/error.utils';\nimport { promisify } from 'util';\nconst jwt = require('jsonwebtoken');\nconst signTokenAsync = promisify(jwt.sign);\nconst verifyTokenAsync = promisify(jwt.verify);\n\n@Injectable()\nexport class JWTService {\n  constructor(private configService: ConfigService) {}\n\n  async generateToken(userProfile: UserProfile): Promise {\n    assert(\n      userProfile,\n      'NO USER PROFILE DETECTED',\n      ERROR_CODES.INVALID_REQUEST,\n    );\n    let token: string;\n    try {\n      token = await signTokenAsync(\n        userProfile,\n        this.configService.get('SECRET'),\n        { expiresIn: 60 * 60 },\n      );\n    } catch (err) {\n      console.log(err);\n    }\n    return token;\n  }\n\n  async verifyToken(token: string): Promise {\n    assert(token, 'NO TOKEN DETECTED', ERROR_CODES.UNAUTHENTICATED);\n    let userProfile: UserProfile;\n    try {\n      const decodedToken = await verifyTokenAsync(\n        token,\n        this.configService.get('SECRET'),\n      );\n      userProfile = Object.assign(\n        { _id: '', email: '', role: [''] },\n        {\n          _id: decodedToken._id,\n          email: decodedToken.email,\n          role: decodedToken.role,\n        },\n      );\n    } catch (error) {\n      throw new HttpException(`Error verifying token: ${error}`, 404);\n    }\n    return userProfile;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/logging.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Observable, tap } from 'rxjs';\nimport { logException } from 'src/utils/error.utils';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    let method: string;\n    let url: string;\n    let request: any;\n\n    method = context.switchToHttp().getRequest().method;\n    url = context.switchToHttp().getRequest().url;\n    if (method === 'GET' || 'DELETE') {\n      request = method;\n    } else {\n      request = context.switchToHttp().getRequest()?.body;\n    }\n\n    const now = Date.now();\n\n    return next.handle().pipe(\n      tap(originalResponse => {\n        try {\n          Logger.log(\n            `[METHOD: ${method}] [PATH: \"${url}\"] [DATE: ${new Date().toLocaleString()} ${\n              Date.now() - now\n            }ms] [REQUEST: ${JSON.stringify(\n              request,\n            )}] [RESPONSE: ${JSON.stringify(originalResponse)}]`,\n          );\n        } catch (exception) {\n          logException(exception);\n        }\n      }),\n    );\n  }\n}\n\nexport function getObjectClone(object: T): T {\n  return JSON.parse(JSON.stringify(object));\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundError.html":{"url":"classes/NotFoundError.html","title":"class - NotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/error.utils.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DomainError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message)\n                    \n                \n                        \n                            \n                                Defined in src/utils/error.utils.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, Logger } from '@nestjs/common';\nimport { ERROR_CODES } from './constants';\n\nexport class DomainError extends Error {\n  name: string;\n  code: string;\n  statusCode: number;\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.UNKNOWN,\n    statusCode: number = HttpStatus.INTERNAL_SERVER_ERROR,\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = statusCode;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class NotFoundError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.NOT_FOUND, HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class InvalidRequestError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_REQUEST, HttpStatus.BAD_REQUEST);\n  }\n}\n\nexport class InvalidInputError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_INPUT, HttpStatus.NOT_ACCEPTABLE);\n  }\n}\n\nexport class UnauthorizedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHORIZED, HttpStatus.UNAUTHORIZED);\n  }\n}\n\nexport class UnauthenticatedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHENTICATED, HttpStatus.FORBIDDEN);\n  }\n}\n\n/* FUNCS */\n\n/**\n * @param predicate Predicate asserted to be true/truthy\n * @param message Error message sent if the assertion is false/falsy\n * @param code Error code sent if the assertion is false/falsy\n * @param log? Boolean value to log or not\n * @returns void OR throws DomainError\n */\nexport function assert(predicate, message, code, log?): void {\n  if (predicate) return;\n  if (log) {\n    logException({ message: message });\n    throwError(message, code);\n  }\n}\n\nexport function throwError(message, code): void {\n  throw new DomainError(message, code);\n}\n\nexport function logException(exception): void {\n  let message = 'Unexpected Error';\n  if (exception?.message) {\n    message = exception.message;\n  }\n  if (exception?.stack) {\n    message = `${message}: Stack: ${exception.stack}`;\n  }\n  Logger.error(message);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PartialProduct.html":{"url":"classes/PartialProduct.html","title":"class - PartialProduct","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PartialProduct\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/partialTypes.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { User } from '../user.model';\nimport { ProductDto } from './product.dto';\nimport { ShoppingCartItemDto } from './shopping-cart-item.dto';\nimport { ShoppingCartDto } from './shopping-cart.dto';\nimport { UserDto } from './user.dto';\n\nexport class PartialUser extends PartialType(UserDto) {}\nexport class PartialShoppingCart extends PartialType(ShoppingCartDto) {}\nexport class PartialShoppingCartItem extends PartialType(ShoppingCartItemDto) {}\nexport class PartialProduct extends PartialType(ProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PartialShoppingCart.html":{"url":"classes/PartialShoppingCart.html","title":"class - PartialShoppingCart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PartialShoppingCart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/partialTypes.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { User } from '../user.model';\nimport { ProductDto } from './product.dto';\nimport { ShoppingCartItemDto } from './shopping-cart-item.dto';\nimport { ShoppingCartDto } from './shopping-cart.dto';\nimport { UserDto } from './user.dto';\n\nexport class PartialUser extends PartialType(UserDto) {}\nexport class PartialShoppingCart extends PartialType(ShoppingCartDto) {}\nexport class PartialShoppingCartItem extends PartialType(ShoppingCartItemDto) {}\nexport class PartialProduct extends PartialType(ProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PartialShoppingCartItem.html":{"url":"classes/PartialShoppingCartItem.html","title":"class - PartialShoppingCartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PartialShoppingCartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/partialTypes.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { User } from '../user.model';\nimport { ProductDto } from './product.dto';\nimport { ShoppingCartItemDto } from './shopping-cart-item.dto';\nimport { ShoppingCartDto } from './shopping-cart.dto';\nimport { UserDto } from './user.dto';\n\nexport class PartialUser extends PartialType(UserDto) {}\nexport class PartialShoppingCart extends PartialType(ShoppingCartDto) {}\nexport class PartialShoppingCartItem extends PartialType(ShoppingCartItemDto) {}\nexport class PartialProduct extends PartialType(ProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PartialUser.html":{"url":"classes/PartialUser.html","title":"class - PartialUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PartialUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/partialTypes.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { User } from '../user.model';\nimport { ProductDto } from './product.dto';\nimport { ShoppingCartItemDto } from './shopping-cart-item.dto';\nimport { ShoppingCartDto } from './shopping-cart.dto';\nimport { UserDto } from './user.dto';\n\nexport class PartialUser extends PartialType(UserDto) {}\nexport class PartialShoppingCart extends PartialType(ShoppingCartDto) {}\nexport class PartialShoppingCartItem extends PartialType(ShoppingCartItemDto) {}\nexport class PartialProduct extends PartialType(ProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/product.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countInStock\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                details\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                name\n                            \n                            \n                                onSale\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        countInStock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSale\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Boolean, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/product.model.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\n@Schema()\nexport class Product extends Document {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true })\n  price: number;\n\n  @Prop({ required: false })\n  image?: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  countInStock: number;\n\n  @Prop({ type: Boolean, default: false })\n  onSale = false;\n\n  @Prop({ required: false, type: mongoose.Schema.Types.Mixed })\n  details?: Record;\n}\n\nexport const ProductSchema = SchemaFactory.createForClass(Product);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteAllProducts\n                            \n                            \n                                getAllProducts\n                            \n                            \n                                getProductById\n                            \n                            \n                                postNewProduct\n                            \n                            \n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAllProducts\n                        \n                    \n                \n            \n            \n                \ndeleteAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProductById\n                        \n                    \n                \n            \n            \n                \ngetProductById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postNewProduct\n                        \n                    \n                \n            \n            \n                \npostNewProduct(product: ProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)@Post()\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                ProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProductById\n                        \n                    \n                \n            \n            \n                \nupdateProductById(id: string, updatedProduct: PartialProduct)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatedProduct\n                                    \n                                                PartialProduct\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { Public } from 'src/common/decorators/public.decorator';\nimport { Role } from 'src/common/decorators/role.decorator';\nimport { PartialProduct } from 'src/models/dto/partialTypes';\nimport { ProductDto } from 'src/models/dto/product.dto';\nimport { ROLES } from 'src/utils/constants';\nimport { ProductService } from './product.service';\n\n@Controller('products')\nexport class ProductController {\n  constructor(private productService: ProductService) {}\n\n  @Public()\n  @Get()\n  getAllProducts(): Promise {\n    return this.productService.getAllProducts();\n  }\n\n  @Public()\n  @Get(':id')\n  getProductById(@Param('id') id: string): Promise {\n    return this.productService.getProductById(id);\n  }\n\n  @Public()\n  @Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)\n  @Post()\n  postNewProduct(@Body() product: ProductDto): Promise {\n    return this.productService.postNewProduct(product);\n  }\n\n  @Public()\n  @Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)\n  @Patch(':id')\n  updateProductById(\n    @Param('id') id: string,\n    @Body() updatedProduct: PartialProduct,\n  ): Promise {\n    return this.productService.updateProductById(id, updatedProduct);\n  }\n\n  @Public()\n  @Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)\n  @Delete()\n  deleteAllProducts(): Promise {\n    return this.productService.deleteAllProducts();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductDto.html":{"url":"classes/ProductDto.html","title":"class - ProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                countInStock\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                details\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                name\n                            \n                            \n                                onSale\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countInStock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty({message: 'Count in stock cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Description must be present'})@IsString({message: 'Description must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({message: 'Image uri must be string if present'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'Product name must be a string'})@IsNotEmpty({message: 'Product must have a name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSale\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({allowInfinity: false, allowNaN: false}, {message: 'Price must be a number'})@IsNotEmpty({message: 'Price cannot be empty'})@IsPositive({message: 'Price must be positive'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/product.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\nimport mongoose from 'mongoose';\n\nexport class ProductDto {\n  @IsOptional()\n  _id?: mongoose.Schema.Types.ObjectId;\n\n  @IsString({ message: 'Product name must be a string' })\n  @IsNotEmpty({ message: 'Product must have a name' })\n  name: string;\n\n  @IsNumber(\n    { allowInfinity: false, allowNaN: false },\n    { message: 'Price must be a number' },\n  )\n  @IsNotEmpty({ message: 'Price cannot be empty' })\n  @IsPositive({ message: 'Price must be positive' })\n  price: number;\n\n  @IsOptional()\n  @IsString({ message: 'Image uri must be string if present' })\n  image?: string;\n\n  @IsNotEmpty({ message: 'Description must be present' })\n  @IsString({ message: 'Description must be a string' })\n  description: string;\n\n  @IsNumber()\n  @IsNotEmpty({ message: 'Count in stock cannot be empty' })\n  countInStock: number;\n\n  @IsBoolean()\n  onSale = false;\n\n  @IsOptional()\n  details?: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nAddToCartListener\n\nAddToCartListener\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nAddToCartListener->ProductModule\n\n\n\n\n\nCRUDService\n\nCRUDService\n\nProductModule -->\n\nCRUDService->ProductModule\n\n\n\n\n\nJWTService\n\nJWTService\n\nProductModule -->\n\nJWTService->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserManagementService\n\nUserManagementService\n\nProductModule -->\n\nUserManagementService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddToCartListener\n                        \n                        \n                            CRUDService\n                        \n                        \n                            JWTService\n                        \n                        \n                            ProductService\n                        \n                        \n                            UserManagementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Product, ProductSchema } from 'src/models/product.model';\nimport { CRUDService } from 'src/common/services/crud.service';\nimport { AddToCartListener } from 'src/listeners';\nimport { User, UserSchema } from 'src/models/user.model';\nimport { UserManagementService } from 'src/user-management/user-management.service';\nimport {\n  UserWithPassword,\n  UserWithPasswordSchema,\n} from 'src/models/user-with-password.model';\nimport { JWTService } from 'src/common/services/jwt.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Product.name,\n        schema: ProductSchema,\n      },\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n      {\n        name: UserWithPassword.name,\n        schema: UserWithPasswordSchema,\n      },\n    ]),\n  ],\n  providers: [\n    ProductService,\n    CRUDService,\n    AddToCartListener,\n    UserManagementService,\n    JWTService,\n  ],\n  controllers: [ProductController],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAllProducts\n                            \n                            \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    Async\n                                getProductById\n                            \n                            \n                                    Async\n                                postNewProduct\n                            \n                            \n                                    Async\n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crudService: CRUDService, productModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crudService\n                                                  \n                                                        \n                                                                        CRUDService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAllProducts\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProductById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProductById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postNewProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    postNewProduct(product: ProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                ProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProductById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProductById(id: string, updatedProduct: PartialProduct)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatedProduct\n                                    \n                                                PartialProduct\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { assert } from 'src/utils/error.utils';\nimport { Model } from 'mongoose';\nimport { CRUDService } from 'src/common/services/crud.service';\nimport { PartialProduct } from 'src/models/dto/partialTypes';\nimport { ProductDto } from 'src/models/dto/product.dto';\nimport { Product } from 'src/models/product.model';\nimport { ERROR_CODES } from 'src/utils/constants';\nimport { logException } from 'src/utils/error.utils';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    private crudService: CRUDService,\n    @InjectModel(Product.name) private productModel: Model,\n  ) {}\n\n  async getAllProducts(): Promise {\n    const allProducts = await this.crudService.findMany(this.productModel);\n    return allProducts;\n  }\n\n  async getProductById(id: string): Promise {\n    const findProduct = await this.crudService.findOne(\n      { _id: id },\n      this.productModel,\n    );\n\n    assert(findProduct, 'PRODUCT NOT FOUND', ERROR_CODES.NOT_FOUND, true);\n    return findProduct;\n  }\n\n  async postNewProduct(product: ProductDto): Promise {\n    const doesProductExist = await this.crudService.findOne(\n      { name: product.name },\n      this.productModel,\n    );\n    assert(\n      !doesProductExist,\n      'PRODUCT ALREADY EXISTS',\n      ERROR_CODES.CONFLICT,\n      true,\n    );\n\n    const newProduct = await this.crudService.create(\n      product,\n      this.productModel,\n    );\n    return newProduct;\n  }\n\n  async updateProductById(\n    id: string,\n    updatedProduct: PartialProduct,\n  ): Promise {\n    const findProduct = await this.crudService.findOne(\n      { _id: id },\n      this.productModel,\n    );\n    assert(findProduct, 'PRODUCT DOES NOT EXIST', ERROR_CODES.NOT_FOUND);\n\n    const updateProduct = await this.crudService.updateOne(\n      { _id: id },\n      { $set: updatedProduct },\n      this.productModel,\n    );\n    return updateProduct;\n  }\n\n  async deleteAllProducts(): Promise {\n    return this.crudService.deleteMany(this.productModel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RetryOptions.html":{"url":"interfaces/RetryOptions.html","title":"interface - RetryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RetryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/retry.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            interval\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxTries\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        interval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxTries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxTries:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestTimeoutException } from '@nestjs/common';\nimport { promisify } from 'util';\nimport { logException } from './error.utils';\n\nexport interface TaskStatus {\n  done: boolean;\n  value?: T | null;\n}\n\nexport interface Task {\n  run(): Promise>;\n  description: string;\n}\n\nexport interface RetryOptions {\n  maxTries?: number;\n  interval?: number;\n}\n\nexport async function retry(\n  task: Task,\n  { maxTries = 10, interval = 100 }: RetryOptions = {},\n): Promise {\n  if (maxTries  0) {\n      await sleep(interval);\n    } else {\n      const msg = `Failed to ${task.description} after ${\n        maxTries * interval\n      } ms`;\n      logException({ message: msg });\n      throw new RequestTimeoutException();\n    }\n  }\n}\n\nexport const sleep = promisify(setTimeout);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingCart.html":{"url":"classes/ShoppingCart.html","title":"class - ShoppingCart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingCart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/shopping-cart.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                items\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShoppingCartItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['ShoppingCartItem'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/shopping-cart.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/shopping-cart.model.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { ShoppingCartItem } from './shopping-cart-item.model';\n\n@Schema()\nexport class ShoppingCart extends Document {\n  @Prop()\n  userId?: string;\n\n  @Prop([ShoppingCartItem])\n  items?: ShoppingCartItem[] = [];\n}\n\nexport const ShoppingCartSchema = SchemaFactory.createForClass(ShoppingCart);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ShoppingCartController.html":{"url":"controllers/ShoppingCartController.html","title":"controller - ShoppingCartController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ShoppingCartController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping-cart/shopping-cart.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                shoppingCart\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addItemToCart\n                            \n                            \n                                clearUserCart\n                            \n                            \n                                getShoppingCart\n                            \n                            \n                                getShoppingCartCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addItemToCart\n                        \n                    \n                \n            \n            \n                \naddItemToCart(id: string, productId: PartialProduct)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Post(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    productId\n                                    \n                                                PartialProduct\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearUserCart\n                        \n                    \n                \n            \n            \n                \nclearUserCart(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShoppingCart\n                        \n                    \n                \n            \n            \n                \ngetShoppingCart(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShoppingCartCount\n                        \n                    \n                \n            \n            \n                \ngetShoppingCartCount(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/count')\n                \n            \n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  Param,\n  Post,\n} from '@nestjs/common';\nimport { PartialProduct } from 'src/models/dto/partialTypes';\nimport { ShoppingCartItemDto } from 'src/models/dto/shopping-cart-item.dto';\nimport { User } from 'src/models/user.model';\nimport { ShoppingCartService } from './shopping-cart.service';\n\n@Controller('shoppingCart')\nexport class ShoppingCartController {\n  constructor(private shoppingCartService: ShoppingCartService) {}\n\n  @Get(':id/count')\n  getShoppingCartCount(@Param('id') id: string): Promise {\n    return this.shoppingCartService.getShoppingCartCount(id);\n  }\n\n  @Get(':id')\n  getShoppingCart(@Param('id') id: string): Promise {\n    return this.shoppingCartService.getShoppingCart(id);\n  }\n\n  @HttpCode(200)\n  @Post(':id')\n  addItemToCart(\n    @Param('id') id: string,\n    @Body() productId: PartialProduct,\n  ): Promise> {\n    return this.shoppingCartService.addItemToCart(id, productId);\n  }\n\n  @Delete(':id')\n  clearUserCart(@Param('id') id: string): Promise {\n    return this.shoppingCartService.clearUserCart(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingCartDto.html":{"url":"classes/ShoppingCartDto.html","title":"class - ShoppingCartDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingCartDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/shopping-cart.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                items\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShoppingCartItemDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/shopping-cart.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/shopping-cart.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsString } from 'class-validator';\nimport { ShoppingCartItemDto } from './shopping-cart-item.dto';\n\nexport class ShoppingCartDto {\n  @IsString()\n  userId?: string;\n\n  @IsArray()\n  items?: ShoppingCartItemDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingCartItem.html":{"url":"classes/ShoppingCartItem.html","title":"class - ShoppingCartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingCartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/shopping-cart-item.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                price\n                            \n                            \n                                productId\n                            \n                            \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/shopping-cart-item.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/shopping-cart-item.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/shopping-cart-item.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/shopping-cart-item.model.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class ShoppingCartItem extends Document {\n  @Prop()\n  productId: string;\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  quantity: number;\n\n  @Prop()\n  price: number;\n}\n\nexport const ShoppingCartItemSchema =\n  SchemaFactory.createForClass(ShoppingCartItem);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingCartItemDto.html":{"url":"classes/ShoppingCartItemDto.html","title":"class - ShoppingCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/shopping-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                price\n                            \n                            \n                                productId\n                            \n                            \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/shopping-cart-item.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/shopping-cart-item.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/shopping-cart-item.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/shopping-cart-item.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator';\n\nexport class ShoppingCartItemDto {\n  @IsString()\n  productId: string;\n\n  @IsString()\n  name: string;\n\n  @IsInt()\n  quantity: number;\n\n  @IsInt()\n  price: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShoppingCartModule.html":{"url":"modules/ShoppingCartModule.html","title":"module - ShoppingCartModule","body":"\n                   \n\n\n\n\n    Modules\n    ShoppingCartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ShoppingCartModule\n\n\n\ncluster_ShoppingCartModule_providers\n\n\n\n\nCRUDService\n\nCRUDService\n\n\n\nShoppingCartModule\n\nShoppingCartModule\n\nShoppingCartModule -->\n\nCRUDService->ShoppingCartModule\n\n\n\n\n\nProductService\n\nProductService\n\nShoppingCartModule -->\n\nProductService->ShoppingCartModule\n\n\n\n\n\nShoppingCartService\n\nShoppingCartService\n\nShoppingCartModule -->\n\nShoppingCartService->ShoppingCartModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shopping-cart/shopping-cart.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CRUDService\n                        \n                        \n                            ProductService\n                        \n                        \n                            ShoppingCartService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ShoppingCartController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ShoppingCartService } from './shopping-cart.service';\nimport { ShoppingCartController } from './shopping-cart.controller';\nimport { CRUDService } from 'src/common/services/crud.service';\nimport { ProductService } from 'src/product/product.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport {\n  ShoppingCart,\n  ShoppingCartSchema,\n} from 'src/models/shopping-cart.model';\nimport { Product, ProductSchema } from 'src/models/product.model';\nimport { User, UserSchema } from 'src/models/user.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: ShoppingCart.name, schema: ShoppingCartSchema },\n      { name: Product.name, schema: ProductSchema },\n      { name: User.name, schema: UserSchema },\n    ]),\n  ],\n  providers: [ShoppingCartService, CRUDService, ProductService],\n  controllers: [ShoppingCartController],\n})\nexport class ShoppingCartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShoppingCartService.html":{"url":"injectables/ShoppingCartService.html","title":"injectable - ShoppingCartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShoppingCartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping-cart/shopping-cart.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addItemToCart\n                            \n                            \n                                    Async\n                                clearUserCart\n                            \n                            \n                                    Async\n                                getShoppingCart\n                            \n                            \n                                    Async\n                                getShoppingCartCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productModel: Model, userModel: Model, crudService: CRUDService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/shopping-cart/shopping-cart.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        crudService\n                                                  \n                                                        \n                                                                        CRUDService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addItemToCart\n                        \n                    \n                \n            \n            \n                \n                    \n                    addItemToCart(id: string, productId: PartialProduct)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    productId\n                                    \n                                                PartialProduct\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearUserCart\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearUserCart(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getShoppingCart\n                        \n                    \n                \n            \n            \n                \n                    \n                    getShoppingCart(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getShoppingCartCount\n                        \n                    \n                \n            \n            \n                \n                    \n                    getShoppingCartCount(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-cart/shopping-cart.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CRUDService } from 'src/common/services/crud.service';\nimport { AddToCartEvent } from 'src/events';\nimport { PartialProduct } from 'src/models/dto/partialTypes';\nimport { ShoppingCartItemDto } from 'src/models/dto/shopping-cart-item.dto';\nimport { ShoppingCartDto } from 'src/models/dto/shopping-cart.dto';\nimport { Product } from 'src/models/product.model';\nimport { ShoppingCartItem } from 'src/models/shopping-cart-item.model';\nimport { ShoppingCart } from 'src/models/shopping-cart.model';\nimport { User } from 'src/models/user.model';\nimport { ERROR_CODES } from 'src/utils/constants';\nimport { retry, Task } from 'src/utils/retry';\n\n@Injectable()\nexport class ShoppingCartService {\n  constructor(\n    @InjectModel(Product.name) private productModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n    private crudService: CRUDService,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  async getShoppingCart(id: string): Promise {\n    const { shoppingCart } = await this.crudService.findOne(\n      { _id: id },\n      this.userModel,\n    );\n    return shoppingCart;\n  }\n\n  async getShoppingCartCount(id: string): Promise {\n    const { shoppingCart } = await this.crudService.findOne(\n      { _id: id },\n      this.userModel,\n    );\n    return shoppingCart.length;\n  }\n\n  async clearUserCart(id: string): Promise {\n    const user = await this.crudService.findOne({ _id: id }, this.userModel);\n    if (!user) {\n      throw new NotFoundException();\n    }\n    user.shoppingCart = [];\n    return await user.save();\n  }\n\n  async addItemToCart(\n    id: string,\n    productId: PartialProduct,\n  ): Promise> {\n    const findProduct = await this.crudService.findOne(\n      { _id: productId },\n      this.productModel,\n    );\n\n    if (!findProduct) {\n      throw new NotFoundException();\n    }\n\n    if (findProduct.countInStock >= 1) {\n      const addToCart = new AddToCartEvent();\n      addToCart.belongsTo = id;\n      addToCart.name = findProduct.name;\n      addToCart.productId = findProduct._id;\n      addToCart.quantity = 1;\n      addToCart.price = findProduct.price;\n      this.eventEmitter.emit('add.to.cart', addToCart);\n      this.crudService.updateOne(\n        { _id: productId },\n        { $set: { countInStock: --findProduct.countInStock } },\n        this.productModel,\n      );\n      return {\n        status: HttpStatus.OK,\n        message: 'Added to Cart/Product stock Updated',\n      };\n    }\n    throw new HttpException(\n      'Product out of stock, please wait for restock',\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/retry.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        run\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        run\n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n            \n                \n                    Defined in src/utils/retry.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise>\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestTimeoutException } from '@nestjs/common';\nimport { promisify } from 'util';\nimport { logException } from './error.utils';\n\nexport interface TaskStatus {\n  done: boolean;\n  value?: T | null;\n}\n\nexport interface Task {\n  run(): Promise>;\n  description: string;\n}\n\nexport interface RetryOptions {\n  maxTries?: number;\n  interval?: number;\n}\n\nexport async function retry(\n  task: Task,\n  { maxTries = 10, interval = 100 }: RetryOptions = {},\n): Promise {\n  if (maxTries  0) {\n      await sleep(interval);\n    } else {\n      const msg = `Failed to ${task.description} after ${\n        maxTries * interval\n      } ms`;\n      logException({ message: msg });\n      throw new RequestTimeoutException();\n    }\n  }\n}\n\nexport const sleep = promisify(setTimeout);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskStatus.html":{"url":"interfaces/TaskStatus.html","title":"interface - TaskStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TaskStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/retry.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            done\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        done\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        done:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     T | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestTimeoutException } from '@nestjs/common';\nimport { promisify } from 'util';\nimport { logException } from './error.utils';\n\nexport interface TaskStatus {\n  done: boolean;\n  value?: T | null;\n}\n\nexport interface Task {\n  run(): Promise>;\n  description: string;\n}\n\nexport interface RetryOptions {\n  maxTries?: number;\n  interval?: number;\n}\n\nexport async function retry(\n  task: Task,\n  { maxTries = 10, interval = 100 }: RetryOptions = {},\n): Promise {\n  if (maxTries  0) {\n      await sleep(interval);\n    } else {\n      const msg = `Failed to ${task.description} after ${\n        maxTries * interval\n      } ms`;\n      logException({ message: msg });\n      throw new RequestTimeoutException();\n    }\n  }\n}\n\nexport const sleep = promisify(setTimeout);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthenticatedError.html":{"url":"classes/UnauthenticatedError.html","title":"class - UnauthenticatedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthenticatedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/error.utils.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DomainError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message)\n                    \n                \n                        \n                            \n                                Defined in src/utils/error.utils.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, Logger } from '@nestjs/common';\nimport { ERROR_CODES } from './constants';\n\nexport class DomainError extends Error {\n  name: string;\n  code: string;\n  statusCode: number;\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.UNKNOWN,\n    statusCode: number = HttpStatus.INTERNAL_SERVER_ERROR,\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = statusCode;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class NotFoundError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.NOT_FOUND, HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class InvalidRequestError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_REQUEST, HttpStatus.BAD_REQUEST);\n  }\n}\n\nexport class InvalidInputError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_INPUT, HttpStatus.NOT_ACCEPTABLE);\n  }\n}\n\nexport class UnauthorizedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHORIZED, HttpStatus.UNAUTHORIZED);\n  }\n}\n\nexport class UnauthenticatedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHENTICATED, HttpStatus.FORBIDDEN);\n  }\n}\n\n/* FUNCS */\n\n/**\n * @param predicate Predicate asserted to be true/truthy\n * @param message Error message sent if the assertion is false/falsy\n * @param code Error code sent if the assertion is false/falsy\n * @param log? Boolean value to log or not\n * @returns void OR throws DomainError\n */\nexport function assert(predicate, message, code, log?): void {\n  if (predicate) return;\n  if (log) {\n    logException({ message: message });\n    throwError(message, code);\n  }\n}\n\nexport function throwError(message, code): void {\n  throw new DomainError(message, code);\n}\n\nexport function logException(exception): void {\n  let message = 'Unexpected Error';\n  if (exception?.message) {\n    message = exception.message;\n  }\n  if (exception?.stack) {\n    message = `${message}: Stack: ${exception.stack}`;\n  }\n  Logger.error(message);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedError.html":{"url":"classes/UnauthorizedError.html","title":"class - UnauthorizedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/error.utils.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DomainError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message)\n                    \n                \n                        \n                            \n                                Defined in src/utils/error.utils.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         DomainError\n\n                            \n                        \n                    \n                        \n                                Defined in         DomainError:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, Logger } from '@nestjs/common';\nimport { ERROR_CODES } from './constants';\n\nexport class DomainError extends Error {\n  name: string;\n  code: string;\n  statusCode: number;\n  constructor(\n    message: string,\n    code: string = ERROR_CODES.UNKNOWN,\n    statusCode: number = HttpStatus.INTERNAL_SERVER_ERROR,\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = statusCode;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class NotFoundError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.NOT_FOUND, HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class InvalidRequestError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_REQUEST, HttpStatus.BAD_REQUEST);\n  }\n}\n\nexport class InvalidInputError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.INVALID_INPUT, HttpStatus.NOT_ACCEPTABLE);\n  }\n}\n\nexport class UnauthorizedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHORIZED, HttpStatus.UNAUTHORIZED);\n  }\n}\n\nexport class UnauthenticatedError extends DomainError {\n  constructor(message) {\n    super(message, ERROR_CODES.UNAUTHENTICATED, HttpStatus.FORBIDDEN);\n  }\n}\n\n/* FUNCS */\n\n/**\n * @param predicate Predicate asserted to be true/truthy\n * @param message Error message sent if the assertion is false/falsy\n * @param code Error code sent if the assertion is false/falsy\n * @param log? Boolean value to log or not\n * @returns void OR throws DomainError\n */\nexport function assert(predicate, message, code, log?): void {\n  if (predicate) return;\n  if (log) {\n    logException({ message: message });\n    throwError(message, code);\n  }\n}\n\nexport function throwError(message, code): void {\n  throw new DomainError(message, code);\n}\n\nexport function logException(exception): void {\n  let message = 'Unexpected Error';\n  if (exception?.message) {\n    message = exception.message;\n  }\n  if (exception?.stack) {\n    message = `${message}: Stack: ${exception.stack}`;\n  }\n  Logger.error(message);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedFilter.html":{"url":"classes/UnauthorizedFilter.html","title":"class - UnauthorizedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/unauthorized.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, argsHost: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/unauthorized.filter.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argsHost\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  ForbiddenException,\n  HttpException,\n  Ip,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { logException } from 'src/utils/error.utils';\n\n@Catch(ForbiddenException, UnauthorizedException)\nexport class UnauthorizedFilter\n  implements ExceptionFilter\n{\n  catch(exception: T, argsHost: ArgumentsHost) {\n    const ctx = argsHost.switchToHttp();\n    const response = ctx.getResponse();\n    const req = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n    const error =\n      typeof response === 'string'\n        ? { message: exceptionResponse }\n        : (exceptionResponse as object);\n    const ip = req.ip;\n    const headers = req.headers;\n    const host = headers.host;\n    const userAgent = headers['user-agent'];\n    logException(exceptionResponse);\n    response.status(status).json({\n      ...error,\n      timestamp: new Date().toISOString(),\n      warning: 'This will be reported',\n      ip: ip,\n      headers: {\n        host: host,\n        userAgent: userAgent,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                role\n                            \n                            \n                                    Optional\n                                shoppingCart\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(ROLES)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shoppingCart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShoppingCartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Array, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user.model.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document, ObjectId } from 'mongoose';\nimport { ROLES } from 'src/utils/constants';\nimport { ShoppingCartItem } from './shopping-cart-item.model';\nimport { ShoppingCart } from './shopping-cart.model';\n\n@Schema()\nexport class User extends Document {\n  @Prop({\n    required: true,\n  })\n  email: string;\n\n  @Prop({\n    type: Array,\n    default: [],\n  })\n  shoppingCart?: ShoppingCartItem[];\n\n  @Prop({\n    required: false,\n  })\n  firstName?: string;\n\n  @Prop({\n    required: false,\n  })\n  lastName?: string;\n\n  @Prop(ROLES)\n  role: ROLES;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                role\n                            \n                            \n                                    Optional\n                                shoppingCart\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be a valid email string'})@IsNotEmpty({message: 'Email cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({message: 'First name must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({message: 'Last name must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(ROLES)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shoppingCart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShoppingCartItemDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dto/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport mongoose, { ObjectId } from 'mongoose';\nimport { ROLES } from 'src/utils/constants';\nimport { ShoppingCartItemDto } from './shopping-cart-item.dto';\nimport { ShoppingCartDto } from './shopping-cart.dto';\n\nexport class UserDto {\n  _id?: any;\n\n  @IsEmail({\n    message: 'Must be a valid email string',\n  })\n  @IsNotEmpty({ message: 'Email cannot be empty' })\n  email: string;\n\n  shoppingCart?: ShoppingCartItemDto[]; //ADD TYPE\n\n  @IsOptional()\n  @IsString({ message: 'First name must be a string' })\n  firstName?: string;\n\n  @IsOptional()\n  @IsString({ message: 'Last name must be a string' })\n  lastName?: string;\n\n  @IsOptional()\n  @IsEnum(ROLES)\n  role: ROLES;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserManagementController.html":{"url":"controllers/UserManagementController.html","title":"controller - UserManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-management/user-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearUserDB\n                            \n                            \n                                createNewUser\n                            \n                            \n                                getUserById\n                            \n                            \n                                login\n                            \n                            \n                                returnAllUsers\n                            \n                            \n                                returnCurrentUser\n                            \n                            \n                                updateUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearUserDB\n                        \n                    \n                \n            \n            \n                \nclearUserDB()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/user-management/user-management.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNewUser\n                        \n                    \n                \n            \n            \n                \ncreateNewUser(credentials: UserWithPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/user-management/user-management.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                                UserWithPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserById\n                        \n                    \n                \n            \n            \n                \ngetUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(ROLES.ADMIN, ROLES.CUSTOMER)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user-management/user-management.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(credentials: Credentials)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user-management/user-management.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                                Credentials\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        returnAllUsers\n                        \n                    \n                \n            \n            \n                \nreturnAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Role(ROLES.ADMIN, ROLES.CUSTOMER)@Get()\n                \n            \n\n            \n                \n                    Defined in src/user-management/user-management.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        returnCurrentUser\n                        \n                    \n                \n            \n            \n                \nreturnCurrentUser(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(ROLES.ADMIN, ROLES.CUSTOMER)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/user-management/user-management.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserById\n                        \n                    \n                \n            \n            \n                \nupdateUserById(id: string, updatedUser: PartialUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(ROLES.CUSTOMER, ROLES.ADMIN, ROLES.SUPER_ADMIN)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/user-management/user-management.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatedUser\n                                    \n                                                PartialUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  HttpCode,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { Public } from 'src/common/decorators/public.decorator';\nimport { Role } from 'src/common/decorators/role.decorator';\nimport { Credentials } from 'src/models/dto/credentials.dto';\nimport { PartialUser } from 'src/models/dto/partialTypes';\nimport { UserWithPasswordDto } from 'src/models/dto/user-with-password.dto';\nimport { UserDto } from 'src/models/dto/user.dto';\nimport { ROLES } from 'src/utils/constants';\nimport { UserManagementService } from './user-management.service';\n\n@Controller('users')\nexport class UserManagementController {\n  constructor(private userManagementService: UserManagementService) {}\n\n  @Role(ROLES.ADMIN, ROLES.CUSTOMER)\n  @Get('me')\n  returnCurrentUser(@Headers('token') token: string): Promise {\n    return this.userManagementService.returnCurrentUser(token);\n  }\n\n  @Public()\n  @Role(ROLES.ADMIN, ROLES.CUSTOMER)\n  @Get()\n  returnAllUsers(): Promise {\n    return this.userManagementService.returnAllUsers();\n  }\n\n  @Role(ROLES.ADMIN, ROLES.CUSTOMER)\n  @Get(':id')\n  getUserById(@Param('id') id: string): Promise {\n    return this.userManagementService.getUserById(id);\n  }\n\n  @Public()\n  @Post()\n  createNewUser(@Body() credentials: UserWithPasswordDto): Promise {\n    return this.userManagementService.createNewUser(credentials);\n  }\n\n  @Public()\n  @Post('login')\n  @HttpCode(200)\n  login(@Body() credentials: Credentials): Promise> {\n    return this.userManagementService.login(credentials);\n  }\n\n  @Role(ROLES.CUSTOMER, ROLES.ADMIN, ROLES.SUPER_ADMIN)\n  @Patch(':id')\n  updateUserById(\n    @Param('id') id: string,\n    @Body() updatedUser: PartialUser,\n  ): Promise {\n    return this.userManagementService.updateUserById(id, updatedUser);\n  }\n\n  @Public()\n  @Role(ROLES.ADMIN, ROLES.SUPER_ADMIN)\n  @Delete()\n  clearUserDB(): Promise {\n    return this.userManagementService.clearUserDB();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserManagementModule.html":{"url":"modules/UserManagementModule.html","title":"module - UserManagementModule","body":"\n                   \n\n\n\n\n    Modules\n    UserManagementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserManagementModule\n\n\n\ncluster_UserManagementModule_providers\n\n\n\ncluster_UserManagementModule_exports\n\n\n\n\nUserManagementService \n\nUserManagementService \n\n\n\nUserManagementModule\n\nUserManagementModule\n\nUserManagementService  -->\n\nUserManagementModule->UserManagementService \n\n\n\n\n\nCRUDService\n\nCRUDService\n\nUserManagementModule -->\n\nCRUDService->UserManagementModule\n\n\n\n\n\nJWTService\n\nJWTService\n\nUserManagementModule -->\n\nJWTService->UserManagementModule\n\n\n\n\n\nUserManagementService\n\nUserManagementService\n\nUserManagementModule -->\n\nUserManagementService->UserManagementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-management/user-management.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CRUDService\n                        \n                        \n                            JWTService\n                        \n                        \n                            UserManagementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserManagementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserManagementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserManagementService } from './user-management.service';\nimport { UserManagementController } from './user-management.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from 'src/models/user.model';\nimport {\n  UserWithPassword,\n  UserWithPasswordSchema,\n} from 'src/models/user-with-password.model';\nimport { CRUDService } from 'src/common/services/crud.service';\nimport { JWTService } from 'src/common/services/jwt.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n      {\n        name: UserWithPassword.name,\n        schema: UserWithPasswordSchema,\n      },\n    ]),\n  ],\n  exports: [UserManagementService],\n  providers: [UserManagementService, CRUDService, JWTService],\n  controllers: [UserManagementController],\n})\nexport class UserManagementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserManagementService.html":{"url":"injectables/UserManagementService.html","title":"injectable - UserManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-management/user-management.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearUserDB\n                            \n                            \n                                convertToUserProfile\n                            \n                            \n                                    Async\n                                createNewUser\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                returnAllUsers\n                            \n                            \n                                    Async\n                                returnCurrentUser\n                            \n                            \n                                    Async\n                                updateUserById\n                            \n                            \n                                    Async\n                                verifyCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crudService: CRUDService, userModel: Model, userWithPasswordModel: Model, jwtService: JWTService)\n                    \n                \n                        \n                            \n                                Defined in src/user-management/user-management.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crudService\n                                                  \n                                                        \n                                                                        CRUDService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userWithPasswordModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JWTService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearUserDB\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearUserDB()\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertToUserProfile\n                        \n                    \n                \n            \n            \n                \nconvertToUserProfile(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserProfile\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewUser(credentials: Credentials)\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                                Credentials\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(credentials: Credentials)\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                                Credentials\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        returnAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    returnAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        returnCurrentUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    returnCurrentUser(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserById(id: string, updatedUser: PartialUser)\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatedUser\n                                    \n                                                PartialUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyCredentials\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyCredentials(credentials: Credentials)\n                \n            \n\n\n            \n                \n                    Defined in src/user-management/user-management.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                                Credentials\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { CRUDService } from 'src/common/services/crud.service';\nimport { UserDto } from 'src/models/dto/user.dto';\nimport { UserWithPassword } from 'src/models/user-with-password.model';\nimport { User } from 'src/models/user.model';\nimport { ERROR_CODES, ROLES, UserProfile } from 'src/utils/constants';\nimport { assert } from 'src/utils/error.utils';\nimport { genSalt, hash } from 'bcryptjs';\nimport { compare } from 'bcryptjs';\nimport { UserWithPasswordDto } from 'src/models/dto/user-with-password.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { JWTService } from 'src/common/services/jwt.service';\nimport { PartialUser } from 'src/models/dto/partialTypes';\nimport { Credentials } from 'src/models/dto/credentials.dto';\n\n@Injectable()\nexport class UserManagementService {\n  constructor(\n    private crudService: CRUDService,\n    @InjectModel(User.name) private userModel: Model,\n    @InjectModel(UserWithPassword.name)\n    private userWithPasswordModel: Model,\n    private jwtService: JWTService,\n  ) {}\n\n  async returnAllUsers(): Promise {\n    const allUsers = await this.crudService.findMany(this.userModel);\n    return allUsers;\n  }\n\n  async getUserById(id: string): Promise {\n    const userExists = await this.crudService.findOne(\n      { _id: id },\n      this.userModel,\n    );\n\n    assert(userExists, 'USER NOT FOUND', ERROR_CODES.NOT_FOUND);\n    return userExists;\n  }\n\n  // Helper func for creating JWT\n  convertToUserProfile(user: UserDto): UserProfile {\n    return {\n      _id: `${user._id}`,\n      email: user.email,\n      role: user.role,\n    };\n  }\n\n  async createNewUser(credentials: Credentials): Promise {\n    const doesUserExist = await this.crudService.findOne(\n      { email: credentials.email },\n      this.userModel,\n    );\n    assert(!doesUserExist, 'USER EXISTS', ERROR_CODES.CONFLICT);\n    const useMe: UserWithPasswordDto = {\n      email: credentials.email,\n      password: credentials.password,\n      role: ROLES.CUSTOMER,\n    };\n    const salt = await genSalt(12);\n    const passHash = await hash(credentials.password, salt);\n    useMe.password = passHash;\n    const privUser = await this.crudService.create(\n      useMe,\n      this.userWithPasswordModel,\n    );\n    const { password, ...rest } = useMe;\n    rest._id = privUser._id;\n    return await this.crudService.create(rest, this.userModel);\n  }\n\n  async verifyCredentials(credentials: Credentials): Promise {\n    assert(credentials, 'NO CREDS DETECTED', ERROR_CODES.INVALID_REQUEST);\n\n    const findUser = await this.crudService.findOne(\n      { email: credentials.email },\n      this.userModel,\n    );\n    assert(findUser, 'USER NOT FOUND', ERROR_CODES.NOT_FOUND);\n    //User Exists now find PW\n    const { password } = await this.crudService.findOne(\n      { email: credentials.email },\n      this.userWithPasswordModel,\n    );\n    assert(password, 'USER NOT FOUND PW', ERROR_CODES.NOT_FOUND);\n\n    // PW found now validate\n    const passwordsMatched = await compare(credentials.password, password);\n    if (!passwordsMatched) {\n      throw new HttpException(\n        'EMAIL OR PASSWORD INCORRECT',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return findUser;\n  }\n\n  async login(credentials: Credentials): Promise> {\n    const user = await this.verifyCredentials(credentials);\n    const userProfile = this.convertToUserProfile(user);\n    const token = await this.jwtService.generateToken(userProfile);\n    return { token };\n  }\n\n  async updateUserById(\n    id: string,\n    updatedUser: PartialUser,\n  ): Promise {\n    const findUser = await this.crudService.updateOne(\n      { _id: id },\n      { $set: updatedUser },\n      this.userModel,\n    );\n    if (!findUser) {\n      throw new NotFoundException();\n    }\n    return findUser;\n  }\n\n  async clearUserDB(): Promise {\n    const userDB = Promise.resolve(this.crudService.deleteMany(this.userModel));\n    const userWPasswordDB = Promise.resolve(\n      this.crudService.deleteMany(this.userWithPasswordModel),\n    );\n\n    await Promise.all([userDB, userWPasswordDB]).then(x => {\n      return x;\n    });\n  }\n\n  async returnCurrentUser(token: string): Promise {\n    const user = await this.jwtService.verifyToken(token);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithPassword.html":{"url":"classes/UserWithPassword.html","title":"class - UserWithPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/user-with-password.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                role\n                            \n                            \n                                    Optional\n                                shoppingCart\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/user-with-password.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(ROLES)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shoppingCart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShoppingCartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Array, default: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         User\n\n                            \n                        \n                    \n                        \n                                Defined in         User:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { User } from './user.model';\n\n@Schema()\nexport class UserWithPassword extends User {\n  @Prop({\n    type: String,\n    required: true,\n  })\n  password: string;\n}\n\nexport const UserWithPasswordSchema =\n  SchemaFactory.createForClass(UserWithPassword);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithPasswordDto.html":{"url":"classes/UserWithPasswordDto.html","title":"class - UserWithPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dto/user-with-password.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        UserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                    Optional\n                                _id\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                role\n                            \n                            \n                                    Optional\n                                shoppingCart\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password cannot be empty!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dto/user-with-password.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                Inherited from         UserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UserDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({message: 'Must be a valid email string'})@IsNotEmpty({message: 'Email cannot be empty'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UserDto:20\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({message: 'First name must be a string'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UserDto:26\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({message: 'Last name must be a string'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UserDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(ROLES)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UserDto:34\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        shoppingCart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShoppingCartItemDto[]\n\n                    \n                \n                        \n                            \n                                Inherited from         UserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UserDto:22\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { UserDto } from './user.dto';\n\nexport class UserWithPasswordDto extends UserDto {\n  @IsNotEmpty({ message: 'Password cannot be empty!' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/catch-all.filter.ts\n            \n            class\n            CatchAllFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filters/unauthorized.filter.ts\n            \n            class\n            UnauthorizedFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/logger/constants.ts\n            \n            variable\n            LOGGER_COLORS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/logger/constants.ts\n            \n            variable\n            LOGGER_DATE_FORMAT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/logger/constants.ts\n            \n            variable\n            LOGGER_LABEL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/logger/constants.ts\n            \n            variable\n            LOGGER_LEVELS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/middleware/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middleware/logging.interceptor.ts\n            \n            function\n            getObjectClone\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/crud.service.ts\n            \n            injectable\n            CRUDService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/services/jwt.service.ts\n            \n            injectable\n            JWTService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/services/jwt.service.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/jwt.service.ts\n            \n            variable\n            signTokenAsync\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/jwt.service.ts\n            \n            variable\n            verifyTokenAsync\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/add-to-cart.event.ts\n            \n            class\n            AddToCartEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/listeners/add-to-cart.listener.ts\n            \n            injectable\n            AddToCartListener\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/dto/credentials.dto.ts\n            \n            class\n            Credentials\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/models/dto/partialTypes.ts\n            \n            class\n            PartialProduct\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/dto/partialTypes.ts\n            \n            class\n            PartialShoppingCart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/dto/partialTypes.ts\n            \n            class\n            PartialShoppingCartItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/dto/partialTypes.ts\n            \n            class\n            PartialUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/dto/product.dto.ts\n            \n            class\n            ProductDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/models/dto/shopping-cart-item.dto.ts\n            \n            class\n            ShoppingCartItemDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/models/dto/shopping-cart.dto.ts\n            \n            class\n            ShoppingCartDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/models/dto/user-with-password.dto.ts\n            \n            class\n            UserWithPasswordDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/models/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/models/product.model.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/models/product.model.ts\n            \n            variable\n            ProductSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/shopping-cart-item.model.ts\n            \n            class\n            ShoppingCartItem\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/models/shopping-cart-item.model.ts\n            \n            variable\n            ShoppingCartItemSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/shopping-cart.model.ts\n            \n            class\n            ShoppingCart\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/models/shopping-cart.model.ts\n            \n            variable\n            ShoppingCartSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user-with-password.model.ts\n            \n            class\n            UserWithPassword\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/models/user-with-password.model.ts\n            \n            variable\n            UserWithPasswordSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/models/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shopping-cart/shopping-cart.controller.ts\n            \n            controller\n            ShoppingCartController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shopping-cart/shopping-cart.service.ts\n            \n            injectable\n            ShoppingCartService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-management/user-management.controller.ts\n            \n            controller\n            UserManagementController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user-management/user-management.service.ts\n            \n            injectable\n            UserManagementService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/utils/constants.ts\n            \n            variable\n            ERROR_CODES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/constants.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/constants.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            class\n            DomainError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            class\n            InvalidInputError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            class\n            InvalidRequestError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            class\n            NotFoundError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            class\n            UnauthenticatedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            class\n            UnauthorizedError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            function\n            assert\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            function\n            logException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/error.utils.ts\n            \n            function\n            throwError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/retry.ts\n            \n            interface\n            RetryOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/retry.ts\n            \n            interface\n            Task\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/retry.ts\n            \n            interface\n            TaskStatus\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/retry.ts\n            \n            function\n            retry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/retry.ts\n            \n            variable\n            sleep\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/event-emitter : ^1.3.1\n        \n            @nestjs/mapped-types : ^1.2.0\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            jsonwebtoken : ^8.5.1\n        \n            mongoose : ^6.7.0\n        \n            nest-winston : ^1.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            winston : ^3.8.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLES\n                    \n                \n                        \n                            \n                                 CUSTOMER\n                            \n                        \n                        \n                            \n                                Value : customer\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 SUPER_ADMIN\n                            \n                        \n                        \n                            \n                                Value : superAdmin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            assert   (src/.../error.utils.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getObjectClone   (src/.../logging.interceptor.ts)\n                        \n                        \n                            logException   (src/.../error.utils.ts)\n                        \n                        \n                            retry   (src/.../retry.ts)\n                        \n                        \n                            throwError   (src/.../error.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/error.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        assert\n                        \n                    \n                \n            \n            \n                \nassert(predicate, message, code, log?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Predicate asserted to be true/truthy\n\n                                    \n                                \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Error message sent if the assertion is false/falsy\n\n                                    \n                                \n                                \n                                    code\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Error code sent if the assertion is false/falsy\n\n                                    \n                                \n                                \n                                    log\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        ? Boolean value to log or not\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void OR throws DomainError\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logException\n                        \n                    \n                \n            \n            \n                \nlogException(exception)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        throwError\n                        \n                    \n                \n            \n            \n                \nthrowError(message, code)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/middleware/logging.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getObjectClone\n                        \n                    \n                \n            \n            \n                \ngetObjectClone(object: T)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/retry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        retry\n                        \n                    \n                \n            \n            \n                \nretry(task: Task, __namedParameters: {maxTries: RetryOptions, interval})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    maxTries\n                                    \n                                                RetryOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        100\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShoppingCartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserManagementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ShoppingCartModule\n\n\n\ncluster_ShoppingCartModule_providers\n\n\n\ncluster_UserManagementModule\n\n\n\ncluster_UserManagementModule_exports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nShoppingCartModule\n\nShoppingCartModule\n\nAppModule -->\n\nShoppingCartModule->AppModule\n\n\n\n\n\nUserManagementModule\n\nUserManagementModule\n\nAppModule -->\n\nUserManagementModule->AppModule\n\n\n\n\n\nUserManagementService \n\nUserManagementService \n\nUserManagementService  -->\n\nUserManagementModule->UserManagementService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCRUDService\n\nCRUDService\n\nCommonModule -->\n\nCRUDService->CommonModule\n\n\n\nProductModule -->\n\nCRUDService->ProductModule\n\n\n\nShoppingCartModule -->\n\nCRUDService->ShoppingCartModule\n\n\n\nUserManagementModule -->\n\nCRUDService->UserManagementModule\n\n\n\n\n\nJWTService\n\nJWTService\n\nCommonModule -->\n\nJWTService->CommonModule\n\n\n\nProductModule -->\n\nJWTService->ProductModule\n\n\n\nUserManagementModule -->\n\nJWTService->UserManagementModule\n\n\n\n\n\nAddToCartListener\n\nAddToCartListener\n\nProductModule -->\n\nAddToCartListener->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\nShoppingCartModule -->\n\nProductService->ShoppingCartModule\n\n\n\n\n\nUserManagementService\n\nUserManagementService\n\nProductModule -->\n\nUserManagementService->ProductModule\n\n\n\nUserManagementModule -->\n\nUserManagementService->UserManagementModule\n\n\n\n\n\nShoppingCartService\n\nShoppingCartService\n\nShoppingCartModule -->\n\nShoppingCartService->ShoppingCartModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Credentials   (src/.../constants.ts)\n                        \n                        \n                            UserProfile   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/constants.ts\n    \n    \n        \n            \n                \n                    \n                    Credentials\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ERROR_CODES   (src/.../constants.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../constants.ts)\n                        \n                        \n                            jwt   (src/.../jwt.service.ts)\n                        \n                        \n                            LOGGER_COLORS   (src/.../constants.ts)\n                        \n                        \n                            LOGGER_DATE_FORMAT   (src/.../constants.ts)\n                        \n                        \n                            LOGGER_LABEL   (src/.../constants.ts)\n                        \n                        \n                            LOGGER_LEVELS   (src/.../constants.ts)\n                        \n                        \n                            ProductSchema   (src/.../product.model.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../constants.ts)\n                        \n                        \n                            ShoppingCartItemSchema   (src/.../shopping-cart-item.model.ts)\n                        \n                        \n                            ShoppingCartSchema   (src/.../shopping-cart.model.ts)\n                        \n                        \n                            signTokenAsync   (src/.../jwt.service.ts)\n                        \n                        \n                            sleep   (src/.../retry.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                        \n                            UserWithPasswordSchema   (src/.../user-with-password.model.ts)\n                        \n                        \n                            verifyTokenAsync   (src/.../jwt.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ERROR_CODES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  UNAUTHENTICATED: 'UNAUTHENTICATED',\n  UNAUTHORIZED: 'UNAUTHORIZED',\n  NOT_FOUND: 'NOT_FOUND',\n  INVALID_REQUEST: 'INVALID_REQUEST',\n  INVALID_INPUT: 'INVALID_INPUT',\n  CONFLICT: 'CONFLICT',\n  UNKNOWN: 'UNKNOWN',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/common/services/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('jsonwebtoken')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signTokenAsync\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(jwt.sign)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyTokenAsync\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(jwt.verify)\n                    \n                \n\n\n        \n    \n\n    src/common/logger/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGER_COLORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  [LOGGER_LEVELS.ERROR]: 'bold red',\n  [LOGGER_LEVELS.WARN]: 'bold yellow',\n  [LOGGER_LEVELS.INFO]: 'bold green',\n  [LOGGER_LEVELS.HTTP]: 'bold blue',\n  [LOGGER_LEVELS.DEBUG]: 'bold magenta',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_DATE_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'YY-MM-DD HH:mm:ss.SSS'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_LABEL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NEST-ECOMMERCE'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_LEVELS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  HTTP: 'http',\n  DEBUG: 'debug',\n}\n                    \n                \n\n\n        \n    \n\n    src/models/product.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProductSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Product)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Array) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n\n    src/models/shopping-cart-item.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShoppingCartItemSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShoppingCartItem)\n                    \n                \n\n\n        \n    \n\n    src/models/shopping-cart.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShoppingCartSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShoppingCart)\n                    \n                \n\n\n        \n    \n\n    src/utils/retry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sleep\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(setTimeout)\n                    \n                \n\n\n        \n    \n\n    src/models/user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    src/models/user-with-password.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserWithPasswordSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(UserWithPassword)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
